// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>

using System;
using System.Linq;
using System.Reflection;
using FastEnumUtility.UnitTests.Models;
using FluentAssertions;
using Xunit;

namespace FastEnumUtility.UnitTests.Cases;



/// <summary>
/// Provides unit tests for enum based on <see cref="sbyte"/> type.
/// </summary>
public sealed class SByteTest
{
    [Fact]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<SByteEnum>().Should().Be<sbyte>();


    [Fact]
    public void GetValues()
    {
        var expect = Enum.GetValues<SByteEnum>();
        var actual = FastEnum.GetValues<SByteEnum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetNames()
    {
        var expect = Enum.GetNames<SByteEnum>();
        var actual = FastEnum.GetNames<SByteEnum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetName()
    {
        //--- defined value
        {
            const SByteEnum defined = SByteEnum.MinValue;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const SByteEnum undefined = (SByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [Fact]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<SByteEnum>()
            .Select(static name =>
            {
                var value = Enum.Parse<SByteEnum>(name);
                var fieldInfo = typeof(SByteEnum).GetField(name);
                return (value, name, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<SByteEnum>();

        actual.Count.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [Fact]
    public void GetMember()
    {
        //--- defined value
        {
            const SByteEnum defined = SByteEnum.MinValue;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined);

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const SByteEnum undefined = (SByteEnum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value);
            var fieldInfo = typeof(T).GetField(name);
            return (value, name, fieldInfo);
        }
        #endregion
    }


    [Fact]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<SByteEnum>();
        min.Should().NotBeNull();
        min.Should().Be(SByteEnum.MinValue);
    }


    [Fact]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<SByteEnum>();
        max.Should().NotBeNull();
        max.Should().Be(SByteEnum.MaxValue);
    }


    [Fact]
    public void IsEmpty()
        => FastEnum.IsEmpty<SByteEnum>().Should().Be(false);


    [Fact]
    public void IsContinuous()
        => FastEnum.IsContinuous<SByteEnum>().Should().Be(false);


    [Fact]
    public void IsFlags()
        => FastEnum.IsFlags<SByteEnum>().Should().Be(false);


    [Fact]
    public void IsDefined()
    {
        FastEnum.IsDefined<SByteEnum>(SByteEnum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum>(SByteEnum.Zero).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum>(SByteEnum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum>((SByteEnum)123).Should().BeFalse();

        SByteEnum.MinValue.IsDefined().Should().BeTrue();
        SByteEnum.Zero.IsDefined().Should().BeTrue();
        SByteEnum.MaxValue.IsDefined().Should().BeTrue();

        FastEnum.IsDefined<SByteEnum>(nameof(SByteEnum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum>(nameof(SByteEnum.Zero)).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum>(nameof(SByteEnum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum>("123").Should().BeFalse();
        FastEnum.IsDefined<SByteEnum>("minvalue").Should().BeFalse();

        FastEnum.IsDefined<SByteEnum>(sbyte.MinValue).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum>(sbyte.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum>((sbyte)123).Should().BeFalse();
        FluentActions
            .Invoking(static () => FastEnum.IsDefined<SByteEnum>((byte)123))
            .Should()
            .Throw<ArgumentException>();
    }


    [Fact]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue), valueString: ((sbyte)SByteEnum.MinValue).ToString()),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero),     valueString: ((sbyte)SByteEnum.Zero).ToString()),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue), valueString: ((sbyte)SByteEnum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<SByteEnum>(x.name).Should().Be(x.value);
            FastEnum.Parse<SByteEnum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<SByteEnum>(x.valueString.ToLower()).Should().Be(x.value);
            FastEnum.Parse<SByteEnum>(x.valueString.ToUpper()).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<SByteEnum>(x.name.ToLower())).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<SByteEnum>(x.name.ToUpper())).Should().Throw<ArgumentException>();
        }
        FluentActions.Invoking(static () => FastEnum.Parse<SByteEnum>("ABCDE")).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue), valueString: ((sbyte)SByteEnum.MinValue).ToString()),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero),     valueString: ((sbyte)SByteEnum.Zero).ToString()),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue), valueString: ((sbyte)SByteEnum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<SByteEnum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<SByteEnum>(x.name.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<SByteEnum>(x.name.ToUpper(), true).Should().Be(x.value);
            FastEnum.Parse<SByteEnum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<SByteEnum>(x.valueString.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<SByteEnum>(x.valueString.ToUpper(), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<SByteEnum>("ABCDE", true)).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue), valueString: ((sbyte)SByteEnum.MinValue).ToString()),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero),     valueString: ((sbyte)SByteEnum.Zero).ToString()),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue), valueString: ((sbyte)SByteEnum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<SByteEnum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum>(x.valueString.ToLower(), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum>(x.valueString.ToUpper(), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum>(x.name.ToLower(), out var _).Should().BeFalse();
            FastEnum.TryParse<SByteEnum>(x.name.ToUpper(), out var _).Should().BeFalse();
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<SByteEnum>(x, out var _).Should().BeFalse();
    }


    [Fact]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue), valueString: ((sbyte)SByteEnum.MinValue).ToString()),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero),     valueString: ((sbyte)SByteEnum.Zero).ToString()),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue), valueString: ((sbyte)SByteEnum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<SByteEnum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum>(x.name.ToLower(), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum>(x.name.ToUpper(), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum>(x.valueString.ToLower(), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum>(x.valueString.ToUpper(), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<SByteEnum>(x, true, out var _).Should().BeFalse();
    }


    [Fact]
    public void ToMember()
    {
        var value = SByteEnum.MaxValue;
        var name = nameof(SByteEnum.MaxValue);
        var member = value.ToMember();
        var info = typeof(SByteEnum).GetField(name);

        member.Name.Should().Be(name);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [Fact]
    public void ToName()
    {
        SByteEnum.MinValue.ToName().Should().Be(nameof(SByteEnum.MinValue));
        SByteEnum.Zero.ToName().Should().Be(nameof(SByteEnum.Zero));
        SByteEnum.MaxValue.ToName().Should().Be(nameof(SByteEnum.MaxValue));
    }


    [Fact]
    public void ToUnderlying()
    {
        var @enum = SByteEnum.MinValue;
        var value = sbyte.MinValue;

        @enum.ToSByte().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }
}



/// <summary>
/// Provides unit tests for enum based on <see cref="byte"/> type.
/// </summary>
public sealed class ByteTest
{
    [Fact]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<ByteEnum>().Should().Be<byte>();


    [Fact]
    public void GetValues()
    {
        var expect = Enum.GetValues<ByteEnum>();
        var actual = FastEnum.GetValues<ByteEnum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetNames()
    {
        var expect = Enum.GetNames<ByteEnum>();
        var actual = FastEnum.GetNames<ByteEnum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetName()
    {
        //--- defined value
        {
            const ByteEnum defined = ByteEnum.MinValue;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const ByteEnum undefined = (ByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [Fact]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<ByteEnum>()
            .Select(static name =>
            {
                var value = Enum.Parse<ByteEnum>(name);
                var fieldInfo = typeof(ByteEnum).GetField(name);
                return (value, name, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<ByteEnum>();

        actual.Count.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [Fact]
    public void GetMember()
    {
        //--- defined value
        {
            const ByteEnum defined = ByteEnum.MinValue;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined);

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const ByteEnum undefined = (ByteEnum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value);
            var fieldInfo = typeof(T).GetField(name);
            return (value, name, fieldInfo);
        }
        #endregion
    }


    [Fact]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<ByteEnum>();
        min.Should().NotBeNull();
        min.Should().Be(ByteEnum.MinValue);
    }


    [Fact]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<ByteEnum>();
        max.Should().NotBeNull();
        max.Should().Be(ByteEnum.MaxValue);
    }


    [Fact]
    public void IsEmpty()
        => FastEnum.IsEmpty<ByteEnum>().Should().Be(false);


    [Fact]
    public void IsContinuous()
        => FastEnum.IsContinuous<ByteEnum>().Should().Be(false);


    [Fact]
    public void IsFlags()
        => FastEnum.IsFlags<ByteEnum>().Should().Be(false);


    [Fact]
    public void IsDefined()
    {
        FastEnum.IsDefined<ByteEnum>(ByteEnum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<ByteEnum>(ByteEnum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<ByteEnum>((ByteEnum)123).Should().BeFalse();

        ByteEnum.MinValue.IsDefined().Should().BeTrue();
        ByteEnum.MaxValue.IsDefined().Should().BeTrue();

        FastEnum.IsDefined<ByteEnum>(nameof(ByteEnum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<ByteEnum>(nameof(ByteEnum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<ByteEnum>("123").Should().BeFalse();
        FastEnum.IsDefined<ByteEnum>("minvalue").Should().BeFalse();

        FastEnum.IsDefined<ByteEnum>(byte.MinValue).Should().BeTrue();
        FastEnum.IsDefined<ByteEnum>(byte.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<ByteEnum>((byte)123).Should().BeFalse();
        FluentActions
            .Invoking(static () => FastEnum.IsDefined<ByteEnum>((sbyte)123))
            .Should()
            .Throw<ArgumentException>();
    }


    [Fact]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue), valueString: ((byte)ByteEnum.MinValue).ToString()),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue), valueString: ((byte)ByteEnum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ByteEnum>(x.name).Should().Be(x.value);
            FastEnum.Parse<ByteEnum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ByteEnum>(x.valueString.ToLower()).Should().Be(x.value);
            FastEnum.Parse<ByteEnum>(x.valueString.ToUpper()).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<ByteEnum>(x.name.ToLower())).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<ByteEnum>(x.name.ToUpper())).Should().Throw<ArgumentException>();
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ByteEnum>("ABCDE")).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue), valueString: ((byte)ByteEnum.MinValue).ToString()),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue), valueString: ((byte)ByteEnum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ByteEnum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<ByteEnum>(x.name.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<ByteEnum>(x.name.ToUpper(), true).Should().Be(x.value);
            FastEnum.Parse<ByteEnum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ByteEnum>(x.valueString.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<ByteEnum>(x.valueString.ToUpper(), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ByteEnum>("ABCDE", true)).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue), valueString: ((byte)ByteEnum.MinValue).ToString()),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue), valueString: ((byte)ByteEnum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ByteEnum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum>(x.valueString.ToLower(), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum>(x.valueString.ToUpper(), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum>(x.name.ToLower(), out var _).Should().BeFalse();
            FastEnum.TryParse<ByteEnum>(x.name.ToUpper(), out var _).Should().BeFalse();
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<ByteEnum>(x, out var _).Should().BeFalse();
    }


    [Fact]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue), valueString: ((byte)ByteEnum.MinValue).ToString()),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue), valueString: ((byte)ByteEnum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ByteEnum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum>(x.name.ToLower(), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum>(x.name.ToUpper(), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum>(x.valueString.ToLower(), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum>(x.valueString.ToUpper(), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<ByteEnum>(x, true, out var _).Should().BeFalse();
    }


    [Fact]
    public void ToMember()
    {
        var value = ByteEnum.MaxValue;
        var name = nameof(ByteEnum.MaxValue);
        var member = value.ToMember();
        var info = typeof(ByteEnum).GetField(name);

        member.Name.Should().Be(name);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [Fact]
    public void ToName()
    {
        ByteEnum.MinValue.ToName().Should().Be(nameof(ByteEnum.MinValue));
        ByteEnum.MaxValue.ToName().Should().Be(nameof(ByteEnum.MaxValue));
    }


    [Fact]
    public void ToUnderlying()
    {
        var @enum = ByteEnum.MinValue;
        var value = byte.MinValue;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        @enum.ToByte().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }
}



/// <summary>
/// Provides unit tests for enum based on <see cref="short"/> type.
/// </summary>
public sealed class Int16Test
{
    [Fact]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<Int16Enum>().Should().Be<short>();


    [Fact]
    public void GetValues()
    {
        var expect = Enum.GetValues<Int16Enum>();
        var actual = FastEnum.GetValues<Int16Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetNames()
    {
        var expect = Enum.GetNames<Int16Enum>();
        var actual = FastEnum.GetNames<Int16Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetName()
    {
        //--- defined value
        {
            const Int16Enum defined = Int16Enum.MinValue;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const Int16Enum undefined = (Int16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [Fact]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<Int16Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<Int16Enum>(name);
                var fieldInfo = typeof(Int16Enum).GetField(name);
                return (value, name, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<Int16Enum>();

        actual.Count.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [Fact]
    public void GetMember()
    {
        //--- defined value
        {
            const Int16Enum defined = Int16Enum.MinValue;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined);

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const Int16Enum undefined = (Int16Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value);
            var fieldInfo = typeof(T).GetField(name);
            return (value, name, fieldInfo);
        }
        #endregion
    }


    [Fact]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<Int16Enum>();
        min.Should().NotBeNull();
        min.Should().Be(Int16Enum.MinValue);
    }


    [Fact]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<Int16Enum>();
        max.Should().NotBeNull();
        max.Should().Be(Int16Enum.MaxValue);
    }


    [Fact]
    public void IsEmpty()
        => FastEnum.IsEmpty<Int16Enum>().Should().Be(false);


    [Fact]
    public void IsContinuous()
        => FastEnum.IsContinuous<Int16Enum>().Should().Be(false);


    [Fact]
    public void IsFlags()
        => FastEnum.IsFlags<Int16Enum>().Should().Be(false);


    [Fact]
    public void IsDefined()
    {
        FastEnum.IsDefined<Int16Enum>(Int16Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum>(Int16Enum.Zero).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum>(Int16Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum>((Int16Enum)123).Should().BeFalse();

        Int16Enum.MinValue.IsDefined().Should().BeTrue();
        Int16Enum.Zero.IsDefined().Should().BeTrue();
        Int16Enum.MaxValue.IsDefined().Should().BeTrue();

        FastEnum.IsDefined<Int16Enum>(nameof(Int16Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum>(nameof(Int16Enum.Zero)).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum>(nameof(Int16Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<Int16Enum>("minvalue").Should().BeFalse();

        FastEnum.IsDefined<Int16Enum>(short.MinValue).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum>(short.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum>((short)123).Should().BeFalse();
        FluentActions
            .Invoking(static () => FastEnum.IsDefined<Int16Enum>((ushort)123))
            .Should()
            .Throw<ArgumentException>();
    }


    [Fact]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue), valueString: ((short)Int16Enum.MinValue).ToString()),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero),     valueString: ((short)Int16Enum.Zero).ToString()),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue), valueString: ((short)Int16Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int16Enum>(x.name).Should().Be(x.value);
            FastEnum.Parse<Int16Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<Int16Enum>(x.valueString.ToLower()).Should().Be(x.value);
            FastEnum.Parse<Int16Enum>(x.valueString.ToUpper()).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<Int16Enum>(x.name.ToLower())).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<Int16Enum>(x.name.ToUpper())).Should().Throw<ArgumentException>();
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int16Enum>("ABCDE")).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue), valueString: ((short)Int16Enum.MinValue).ToString()),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero),     valueString: ((short)Int16Enum.Zero).ToString()),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue), valueString: ((short)Int16Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int16Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<Int16Enum>(x.name.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<Int16Enum>(x.name.ToUpper(), true).Should().Be(x.value);
            FastEnum.Parse<Int16Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<Int16Enum>(x.valueString.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<Int16Enum>(x.valueString.ToUpper(), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int16Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue), valueString: ((short)Int16Enum.MinValue).ToString()),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero),     valueString: ((short)Int16Enum.Zero).ToString()),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue), valueString: ((short)Int16Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int16Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum>(x.valueString.ToLower(), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum>(x.valueString.ToUpper(), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum>(x.name.ToLower(), out var _).Should().BeFalse();
            FastEnum.TryParse<Int16Enum>(x.name.ToUpper(), out var _).Should().BeFalse();
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<Int16Enum>(x, out var _).Should().BeFalse();
    }


    [Fact]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue), valueString: ((short)Int16Enum.MinValue).ToString()),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero),     valueString: ((short)Int16Enum.Zero).ToString()),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue), valueString: ((short)Int16Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int16Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum>(x.name.ToLower(), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum>(x.name.ToUpper(), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum>(x.valueString.ToLower(), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum>(x.valueString.ToUpper(), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<Int16Enum>(x, true, out var _).Should().BeFalse();
    }


    [Fact]
    public void ToMember()
    {
        var value = Int16Enum.MaxValue;
        var name = nameof(Int16Enum.MaxValue);
        var member = value.ToMember();
        var info = typeof(Int16Enum).GetField(name);

        member.Name.Should().Be(name);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [Fact]
    public void ToName()
    {
        Int16Enum.MinValue.ToName().Should().Be(nameof(Int16Enum.MinValue));
        Int16Enum.Zero.ToName().Should().Be(nameof(Int16Enum.Zero));
        Int16Enum.MaxValue.ToName().Should().Be(nameof(Int16Enum.MaxValue));
    }


    [Fact]
    public void ToUnderlying()
    {
        var @enum = Int16Enum.MinValue;
        var value = short.MinValue;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        @enum.ToInt16().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }
}



/// <summary>
/// Provides unit tests for enum based on <see cref="ushort"/> type.
/// </summary>
public sealed class UInt16Test
{
    [Fact]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<UInt16Enum>().Should().Be<ushort>();


    [Fact]
    public void GetValues()
    {
        var expect = Enum.GetValues<UInt16Enum>();
        var actual = FastEnum.GetValues<UInt16Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetNames()
    {
        var expect = Enum.GetNames<UInt16Enum>();
        var actual = FastEnum.GetNames<UInt16Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetName()
    {
        //--- defined value
        {
            const UInt16Enum defined = UInt16Enum.MinValue;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const UInt16Enum undefined = (UInt16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [Fact]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<UInt16Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<UInt16Enum>(name);
                var fieldInfo = typeof(UInt16Enum).GetField(name);
                return (value, name, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<UInt16Enum>();

        actual.Count.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [Fact]
    public void GetMember()
    {
        //--- defined value
        {
            const UInt16Enum defined = UInt16Enum.MinValue;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined);

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const UInt16Enum undefined = (UInt16Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value);
            var fieldInfo = typeof(T).GetField(name);
            return (value, name, fieldInfo);
        }
        #endregion
    }


    [Fact]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<UInt16Enum>();
        min.Should().NotBeNull();
        min.Should().Be(UInt16Enum.MinValue);
    }


    [Fact]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<UInt16Enum>();
        max.Should().NotBeNull();
        max.Should().Be(UInt16Enum.MaxValue);
    }


    [Fact]
    public void IsEmpty()
        => FastEnum.IsEmpty<UInt16Enum>().Should().Be(false);


    [Fact]
    public void IsContinuous()
        => FastEnum.IsContinuous<UInt16Enum>().Should().Be(false);


    [Fact]
    public void IsFlags()
        => FastEnum.IsFlags<UInt16Enum>().Should().Be(false);


    [Fact]
    public void IsDefined()
    {
        FastEnum.IsDefined<UInt16Enum>(UInt16Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<UInt16Enum>(UInt16Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<UInt16Enum>((UInt16Enum)123).Should().BeFalse();

        UInt16Enum.MinValue.IsDefined().Should().BeTrue();
        UInt16Enum.MaxValue.IsDefined().Should().BeTrue();

        FastEnum.IsDefined<UInt16Enum>(nameof(UInt16Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt16Enum>(nameof(UInt16Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt16Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<UInt16Enum>("minvalue").Should().BeFalse();

        FastEnum.IsDefined<UInt16Enum>(ushort.MinValue).Should().BeTrue();
        FastEnum.IsDefined<UInt16Enum>(ushort.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<UInt16Enum>((ushort)123).Should().BeFalse();
        FluentActions
            .Invoking(static () => FastEnum.IsDefined<UInt16Enum>((short)123))
            .Should()
            .Throw<ArgumentException>();
    }


    [Fact]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue), valueString: ((ushort)UInt16Enum.MinValue).ToString()),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue), valueString: ((ushort)UInt16Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt16Enum>(x.name).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum>(x.valueString.ToLower()).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum>(x.valueString.ToUpper()).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<UInt16Enum>(x.name.ToLower())).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<UInt16Enum>(x.name.ToUpper())).Should().Throw<ArgumentException>();
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt16Enum>("ABCDE")).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue), valueString: ((ushort)UInt16Enum.MinValue).ToString()),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue), valueString: ((ushort)UInt16Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt16Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum>(x.name.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum>(x.name.ToUpper(), true).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum>(x.valueString.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum>(x.valueString.ToUpper(), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt16Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue), valueString: ((ushort)UInt16Enum.MinValue).ToString()),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue), valueString: ((ushort)UInt16Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt16Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum>(x.valueString.ToLower(), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum>(x.valueString.ToUpper(), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum>(x.name.ToLower(), out var _).Should().BeFalse();
            FastEnum.TryParse<UInt16Enum>(x.name.ToUpper(), out var _).Should().BeFalse();
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<UInt16Enum>(x, out var _).Should().BeFalse();
    }


    [Fact]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue), valueString: ((ushort)UInt16Enum.MinValue).ToString()),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue), valueString: ((ushort)UInt16Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt16Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum>(x.name.ToLower(), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum>(x.name.ToUpper(), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum>(x.valueString.ToLower(), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum>(x.valueString.ToUpper(), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<UInt16Enum>(x, true, out var _).Should().BeFalse();
    }


    [Fact]
    public void ToMember()
    {
        var value = UInt16Enum.MaxValue;
        var name = nameof(UInt16Enum.MaxValue);
        var member = value.ToMember();
        var info = typeof(UInt16Enum).GetField(name);

        member.Name.Should().Be(name);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [Fact]
    public void ToName()
    {
        UInt16Enum.MinValue.ToName().Should().Be(nameof(UInt16Enum.MinValue));
        UInt16Enum.MaxValue.ToName().Should().Be(nameof(UInt16Enum.MaxValue));
    }


    [Fact]
    public void ToUnderlying()
    {
        var @enum = UInt16Enum.MinValue;
        var value = ushort.MinValue;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        @enum.ToUInt16().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }
}



/// <summary>
/// Provides unit tests for enum based on <see cref="int"/> type.
/// </summary>
public sealed class Int32Test
{
    [Fact]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<Int32Enum>().Should().Be<int>();


    [Fact]
    public void GetValues()
    {
        var expect = Enum.GetValues<Int32Enum>();
        var actual = FastEnum.GetValues<Int32Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetNames()
    {
        var expect = Enum.GetNames<Int32Enum>();
        var actual = FastEnum.GetNames<Int32Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetName()
    {
        //--- defined value
        {
            const Int32Enum defined = Int32Enum.MinValue;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const Int32Enum undefined = (Int32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [Fact]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<Int32Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<Int32Enum>(name);
                var fieldInfo = typeof(Int32Enum).GetField(name);
                return (value, name, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<Int32Enum>();

        actual.Count.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [Fact]
    public void GetMember()
    {
        //--- defined value
        {
            const Int32Enum defined = Int32Enum.MinValue;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined);

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const Int32Enum undefined = (Int32Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value);
            var fieldInfo = typeof(T).GetField(name);
            return (value, name, fieldInfo);
        }
        #endregion
    }


    [Fact]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<Int32Enum>();
        min.Should().NotBeNull();
        min.Should().Be(Int32Enum.MinValue);
    }


    [Fact]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<Int32Enum>();
        max.Should().NotBeNull();
        max.Should().Be(Int32Enum.MaxValue);
    }


    [Fact]
    public void IsEmpty()
        => FastEnum.IsEmpty<Int32Enum>().Should().Be(false);


    [Fact]
    public void IsContinuous()
        => FastEnum.IsContinuous<Int32Enum>().Should().Be(false);


    [Fact]
    public void IsFlags()
        => FastEnum.IsFlags<Int32Enum>().Should().Be(false);


    [Fact]
    public void IsDefined()
    {
        FastEnum.IsDefined<Int32Enum>(Int32Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum>(Int32Enum.Zero).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum>(Int32Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum>((Int32Enum)123).Should().BeFalse();

        Int32Enum.MinValue.IsDefined().Should().BeTrue();
        Int32Enum.Zero.IsDefined().Should().BeTrue();
        Int32Enum.MaxValue.IsDefined().Should().BeTrue();

        FastEnum.IsDefined<Int32Enum>(nameof(Int32Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum>(nameof(Int32Enum.Zero)).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum>(nameof(Int32Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<Int32Enum>("minvalue").Should().BeFalse();

        FastEnum.IsDefined<Int32Enum>(int.MinValue).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum>(int.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum>((int)123).Should().BeFalse();
        FluentActions
            .Invoking(static () => FastEnum.IsDefined<Int32Enum>((uint)123))
            .Should()
            .Throw<ArgumentException>();
    }


    [Fact]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue), valueString: ((int)Int32Enum.MinValue).ToString()),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero),     valueString: ((int)Int32Enum.Zero).ToString()),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue), valueString: ((int)Int32Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int32Enum>(x.name).Should().Be(x.value);
            FastEnum.Parse<Int32Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<Int32Enum>(x.valueString.ToLower()).Should().Be(x.value);
            FastEnum.Parse<Int32Enum>(x.valueString.ToUpper()).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<Int32Enum>(x.name.ToLower())).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<Int32Enum>(x.name.ToUpper())).Should().Throw<ArgumentException>();
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int32Enum>("ABCDE")).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue), valueString: ((int)Int32Enum.MinValue).ToString()),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero),     valueString: ((int)Int32Enum.Zero).ToString()),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue), valueString: ((int)Int32Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int32Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<Int32Enum>(x.name.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<Int32Enum>(x.name.ToUpper(), true).Should().Be(x.value);
            FastEnum.Parse<Int32Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<Int32Enum>(x.valueString.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<Int32Enum>(x.valueString.ToUpper(), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int32Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue), valueString: ((int)Int32Enum.MinValue).ToString()),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero),     valueString: ((int)Int32Enum.Zero).ToString()),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue), valueString: ((int)Int32Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int32Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum>(x.valueString.ToLower(), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum>(x.valueString.ToUpper(), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum>(x.name.ToLower(), out var _).Should().BeFalse();
            FastEnum.TryParse<Int32Enum>(x.name.ToUpper(), out var _).Should().BeFalse();
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<Int32Enum>(x, out var _).Should().BeFalse();
    }


    [Fact]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue), valueString: ((int)Int32Enum.MinValue).ToString()),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero),     valueString: ((int)Int32Enum.Zero).ToString()),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue), valueString: ((int)Int32Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int32Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum>(x.name.ToLower(), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum>(x.name.ToUpper(), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum>(x.valueString.ToLower(), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum>(x.valueString.ToUpper(), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<Int32Enum>(x, true, out var _).Should().BeFalse();
    }


    [Fact]
    public void ToMember()
    {
        var value = Int32Enum.MaxValue;
        var name = nameof(Int32Enum.MaxValue);
        var member = value.ToMember();
        var info = typeof(Int32Enum).GetField(name);

        member.Name.Should().Be(name);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [Fact]
    public void ToName()
    {
        Int32Enum.MinValue.ToName().Should().Be(nameof(Int32Enum.MinValue));
        Int32Enum.Zero.ToName().Should().Be(nameof(Int32Enum.Zero));
        Int32Enum.MaxValue.ToName().Should().Be(nameof(Int32Enum.MaxValue));
    }


    [Fact]
    public void ToUnderlying()
    {
        var @enum = Int32Enum.MinValue;
        var value = int.MinValue;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        @enum.ToInt32().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }
}



/// <summary>
/// Provides unit tests for enum based on <see cref="uint"/> type.
/// </summary>
public sealed class UInt32Test
{
    [Fact]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<UInt32Enum>().Should().Be<uint>();


    [Fact]
    public void GetValues()
    {
        var expect = Enum.GetValues<UInt32Enum>();
        var actual = FastEnum.GetValues<UInt32Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetNames()
    {
        var expect = Enum.GetNames<UInt32Enum>();
        var actual = FastEnum.GetNames<UInt32Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetName()
    {
        //--- defined value
        {
            const UInt32Enum defined = UInt32Enum.MinValue;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const UInt32Enum undefined = (UInt32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [Fact]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<UInt32Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<UInt32Enum>(name);
                var fieldInfo = typeof(UInt32Enum).GetField(name);
                return (value, name, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<UInt32Enum>();

        actual.Count.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [Fact]
    public void GetMember()
    {
        //--- defined value
        {
            const UInt32Enum defined = UInt32Enum.MinValue;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined);

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const UInt32Enum undefined = (UInt32Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value);
            var fieldInfo = typeof(T).GetField(name);
            return (value, name, fieldInfo);
        }
        #endregion
    }


    [Fact]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<UInt32Enum>();
        min.Should().NotBeNull();
        min.Should().Be(UInt32Enum.MinValue);
    }


    [Fact]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<UInt32Enum>();
        max.Should().NotBeNull();
        max.Should().Be(UInt32Enum.MaxValue);
    }


    [Fact]
    public void IsEmpty()
        => FastEnum.IsEmpty<UInt32Enum>().Should().Be(false);


    [Fact]
    public void IsContinuous()
        => FastEnum.IsContinuous<UInt32Enum>().Should().Be(false);


    [Fact]
    public void IsFlags()
        => FastEnum.IsFlags<UInt32Enum>().Should().Be(false);


    [Fact]
    public void IsDefined()
    {
        FastEnum.IsDefined<UInt32Enum>(UInt32Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<UInt32Enum>(UInt32Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<UInt32Enum>((UInt32Enum)123).Should().BeFalse();

        UInt32Enum.MinValue.IsDefined().Should().BeTrue();
        UInt32Enum.MaxValue.IsDefined().Should().BeTrue();

        FastEnum.IsDefined<UInt32Enum>(nameof(UInt32Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt32Enum>(nameof(UInt32Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt32Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<UInt32Enum>("minvalue").Should().BeFalse();

        FastEnum.IsDefined<UInt32Enum>(uint.MinValue).Should().BeTrue();
        FastEnum.IsDefined<UInt32Enum>(uint.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<UInt32Enum>((uint)123).Should().BeFalse();
        FluentActions
            .Invoking(static () => FastEnum.IsDefined<UInt32Enum>((int)123))
            .Should()
            .Throw<ArgumentException>();
    }


    [Fact]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue), valueString: ((uint)UInt32Enum.MinValue).ToString()),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue), valueString: ((uint)UInt32Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt32Enum>(x.name).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum>(x.valueString.ToLower()).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum>(x.valueString.ToUpper()).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<UInt32Enum>(x.name.ToLower())).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<UInt32Enum>(x.name.ToUpper())).Should().Throw<ArgumentException>();
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt32Enum>("ABCDE")).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue), valueString: ((uint)UInt32Enum.MinValue).ToString()),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue), valueString: ((uint)UInt32Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt32Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum>(x.name.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum>(x.name.ToUpper(), true).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum>(x.valueString.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum>(x.valueString.ToUpper(), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt32Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue), valueString: ((uint)UInt32Enum.MinValue).ToString()),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue), valueString: ((uint)UInt32Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt32Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum>(x.valueString.ToLower(), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum>(x.valueString.ToUpper(), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum>(x.name.ToLower(), out var _).Should().BeFalse();
            FastEnum.TryParse<UInt32Enum>(x.name.ToUpper(), out var _).Should().BeFalse();
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<UInt32Enum>(x, out var _).Should().BeFalse();
    }


    [Fact]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue), valueString: ((uint)UInt32Enum.MinValue).ToString()),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue), valueString: ((uint)UInt32Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt32Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum>(x.name.ToLower(), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum>(x.name.ToUpper(), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum>(x.valueString.ToLower(), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum>(x.valueString.ToUpper(), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<UInt32Enum>(x, true, out var _).Should().BeFalse();
    }


    [Fact]
    public void ToMember()
    {
        var value = UInt32Enum.MaxValue;
        var name = nameof(UInt32Enum.MaxValue);
        var member = value.ToMember();
        var info = typeof(UInt32Enum).GetField(name);

        member.Name.Should().Be(name);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [Fact]
    public void ToName()
    {
        UInt32Enum.MinValue.ToName().Should().Be(nameof(UInt32Enum.MinValue));
        UInt32Enum.MaxValue.ToName().Should().Be(nameof(UInt32Enum.MaxValue));
    }


    [Fact]
    public void ToUnderlying()
    {
        var @enum = UInt32Enum.MinValue;
        var value = uint.MinValue;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        @enum.ToUInt32().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }
}



/// <summary>
/// Provides unit tests for enum based on <see cref="long"/> type.
/// </summary>
public sealed class Int64Test
{
    [Fact]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<Int64Enum>().Should().Be<long>();


    [Fact]
    public void GetValues()
    {
        var expect = Enum.GetValues<Int64Enum>();
        var actual = FastEnum.GetValues<Int64Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetNames()
    {
        var expect = Enum.GetNames<Int64Enum>();
        var actual = FastEnum.GetNames<Int64Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetName()
    {
        //--- defined value
        {
            const Int64Enum defined = Int64Enum.MinValue;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const Int64Enum undefined = (Int64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [Fact]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<Int64Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<Int64Enum>(name);
                var fieldInfo = typeof(Int64Enum).GetField(name);
                return (value, name, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<Int64Enum>();

        actual.Count.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [Fact]
    public void GetMember()
    {
        //--- defined value
        {
            const Int64Enum defined = Int64Enum.MinValue;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined);

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const Int64Enum undefined = (Int64Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value);
            var fieldInfo = typeof(T).GetField(name);
            return (value, name, fieldInfo);
        }
        #endregion
    }


    [Fact]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<Int64Enum>();
        min.Should().NotBeNull();
        min.Should().Be(Int64Enum.MinValue);
    }


    [Fact]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<Int64Enum>();
        max.Should().NotBeNull();
        max.Should().Be(Int64Enum.MaxValue);
    }


    [Fact]
    public void IsEmpty()
        => FastEnum.IsEmpty<Int64Enum>().Should().Be(false);


    [Fact]
    public void IsContinuous()
        => FastEnum.IsContinuous<Int64Enum>().Should().Be(false);


    [Fact]
    public void IsFlags()
        => FastEnum.IsFlags<Int64Enum>().Should().Be(false);


    [Fact]
    public void IsDefined()
    {
        FastEnum.IsDefined<Int64Enum>(Int64Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum>(Int64Enum.Zero).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum>(Int64Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum>((Int64Enum)123).Should().BeFalse();

        Int64Enum.MinValue.IsDefined().Should().BeTrue();
        Int64Enum.Zero.IsDefined().Should().BeTrue();
        Int64Enum.MaxValue.IsDefined().Should().BeTrue();

        FastEnum.IsDefined<Int64Enum>(nameof(Int64Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum>(nameof(Int64Enum.Zero)).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum>(nameof(Int64Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<Int64Enum>("minvalue").Should().BeFalse();

        FastEnum.IsDefined<Int64Enum>(long.MinValue).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum>(long.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum>((long)123).Should().BeFalse();
        FluentActions
            .Invoking(static () => FastEnum.IsDefined<Int64Enum>((ulong)123))
            .Should()
            .Throw<ArgumentException>();
    }


    [Fact]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue), valueString: ((long)Int64Enum.MinValue).ToString()),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero),     valueString: ((long)Int64Enum.Zero).ToString()),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue), valueString: ((long)Int64Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int64Enum>(x.name).Should().Be(x.value);
            FastEnum.Parse<Int64Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<Int64Enum>(x.valueString.ToLower()).Should().Be(x.value);
            FastEnum.Parse<Int64Enum>(x.valueString.ToUpper()).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<Int64Enum>(x.name.ToLower())).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<Int64Enum>(x.name.ToUpper())).Should().Throw<ArgumentException>();
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int64Enum>("ABCDE")).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue), valueString: ((long)Int64Enum.MinValue).ToString()),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero),     valueString: ((long)Int64Enum.Zero).ToString()),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue), valueString: ((long)Int64Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int64Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<Int64Enum>(x.name.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<Int64Enum>(x.name.ToUpper(), true).Should().Be(x.value);
            FastEnum.Parse<Int64Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<Int64Enum>(x.valueString.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<Int64Enum>(x.valueString.ToUpper(), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int64Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue), valueString: ((long)Int64Enum.MinValue).ToString()),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero),     valueString: ((long)Int64Enum.Zero).ToString()),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue), valueString: ((long)Int64Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int64Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum>(x.valueString.ToLower(), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum>(x.valueString.ToUpper(), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum>(x.name.ToLower(), out var _).Should().BeFalse();
            FastEnum.TryParse<Int64Enum>(x.name.ToUpper(), out var _).Should().BeFalse();
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<Int64Enum>(x, out var _).Should().BeFalse();
    }


    [Fact]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue), valueString: ((long)Int64Enum.MinValue).ToString()),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero),     valueString: ((long)Int64Enum.Zero).ToString()),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue), valueString: ((long)Int64Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int64Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum>(x.name.ToLower(), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum>(x.name.ToUpper(), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum>(x.valueString.ToLower(), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum>(x.valueString.ToUpper(), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<Int64Enum>(x, true, out var _).Should().BeFalse();
    }


    [Fact]
    public void ToMember()
    {
        var value = Int64Enum.MaxValue;
        var name = nameof(Int64Enum.MaxValue);
        var member = value.ToMember();
        var info = typeof(Int64Enum).GetField(name);

        member.Name.Should().Be(name);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [Fact]
    public void ToName()
    {
        Int64Enum.MinValue.ToName().Should().Be(nameof(Int64Enum.MinValue));
        Int64Enum.Zero.ToName().Should().Be(nameof(Int64Enum.Zero));
        Int64Enum.MaxValue.ToName().Should().Be(nameof(Int64Enum.MaxValue));
    }


    [Fact]
    public void ToUnderlying()
    {
        var @enum = Int64Enum.MinValue;
        var value = long.MinValue;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        @enum.ToInt64().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }
}



/// <summary>
/// Provides unit tests for enum based on <see cref="ulong"/> type.
/// </summary>
public sealed class UInt64Test
{
    [Fact]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<UInt64Enum>().Should().Be<ulong>();


    [Fact]
    public void GetValues()
    {
        var expect = Enum.GetValues<UInt64Enum>();
        var actual = FastEnum.GetValues<UInt64Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetNames()
    {
        var expect = Enum.GetNames<UInt64Enum>();
        var actual = FastEnum.GetNames<UInt64Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [Fact]
    public void GetName()
    {
        //--- defined value
        {
            const UInt64Enum defined = UInt64Enum.MinValue;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const UInt64Enum undefined = (UInt64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [Fact]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<UInt64Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<UInt64Enum>(name);
                var fieldInfo = typeof(UInt64Enum).GetField(name);
                return (value, name, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<UInt64Enum>();

        actual.Count.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [Fact]
    public void GetMember()
    {
        //--- defined value
        {
            const UInt64Enum defined = UInt64Enum.MinValue;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined);

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const UInt64Enum undefined = (UInt64Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value);
            var fieldInfo = typeof(T).GetField(name);
            return (value, name, fieldInfo);
        }
        #endregion
    }


    [Fact]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<UInt64Enum>();
        min.Should().NotBeNull();
        min.Should().Be(UInt64Enum.MinValue);
    }


    [Fact]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<UInt64Enum>();
        max.Should().NotBeNull();
        max.Should().Be(UInt64Enum.MaxValue);
    }


    [Fact]
    public void IsEmpty()
        => FastEnum.IsEmpty<UInt64Enum>().Should().Be(false);


    [Fact]
    public void IsContinuous()
        => FastEnum.IsContinuous<UInt64Enum>().Should().Be(false);


    [Fact]
    public void IsFlags()
        => FastEnum.IsFlags<UInt64Enum>().Should().Be(false);


    [Fact]
    public void IsDefined()
    {
        FastEnum.IsDefined<UInt64Enum>(UInt64Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<UInt64Enum>(UInt64Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<UInt64Enum>((UInt64Enum)123).Should().BeFalse();

        UInt64Enum.MinValue.IsDefined().Should().BeTrue();
        UInt64Enum.MaxValue.IsDefined().Should().BeTrue();

        FastEnum.IsDefined<UInt64Enum>(nameof(UInt64Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt64Enum>(nameof(UInt64Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt64Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<UInt64Enum>("minvalue").Should().BeFalse();

        FastEnum.IsDefined<UInt64Enum>(ulong.MinValue).Should().BeTrue();
        FastEnum.IsDefined<UInt64Enum>(ulong.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<UInt64Enum>((ulong)123).Should().BeFalse();
        FluentActions
            .Invoking(static () => FastEnum.IsDefined<UInt64Enum>((long)123))
            .Should()
            .Throw<ArgumentException>();
    }


    [Fact]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue), valueString: ((ulong)UInt64Enum.MinValue).ToString()),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue), valueString: ((ulong)UInt64Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt64Enum>(x.name).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum>(x.valueString.ToLower()).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum>(x.valueString.ToUpper()).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<UInt64Enum>(x.name.ToLower())).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<UInt64Enum>(x.name.ToUpper())).Should().Throw<ArgumentException>();
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt64Enum>("ABCDE")).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue), valueString: ((ulong)UInt64Enum.MinValue).ToString()),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue), valueString: ((ulong)UInt64Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt64Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum>(x.name.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum>(x.name.ToUpper(), true).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum>(x.valueString.ToLower(), true).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum>(x.valueString.ToUpper(), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt64Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
    }


    [Fact]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue), valueString: ((ulong)UInt64Enum.MinValue).ToString()),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue), valueString: ((ulong)UInt64Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt64Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum>(x.valueString.ToLower(), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum>(x.valueString.ToUpper(), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum>(x.name.ToLower(), out var _).Should().BeFalse();
            FastEnum.TryParse<UInt64Enum>(x.name.ToUpper(), out var _).Should().BeFalse();
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<UInt64Enum>(x, out var _).Should().BeFalse();
    }


    [Fact]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue), valueString: ((ulong)UInt64Enum.MinValue).ToString()),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue), valueString: ((ulong)UInt64Enum.MaxValue).ToString()),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt64Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum>(x.name.ToLower(), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum>(x.name.ToUpper(), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum>(x.valueString.ToLower(), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum>(x.valueString.ToUpper(), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        foreach (var x in new[] { "ABCDE", "", null })
            FastEnum.TryParse<UInt64Enum>(x, true, out var _).Should().BeFalse();
    }


    [Fact]
    public void ToMember()
    {
        var value = UInt64Enum.MaxValue;
        var name = nameof(UInt64Enum.MaxValue);
        var member = value.ToMember();
        var info = typeof(UInt64Enum).GetField(name);

        member.Name.Should().Be(name);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [Fact]
    public void ToName()
    {
        UInt64Enum.MinValue.ToName().Should().Be(nameof(UInt64Enum.MinValue));
        UInt64Enum.MaxValue.ToName().Should().Be(nameof(UInt64Enum.MaxValue));
    }


    [Fact]
    public void ToUnderlying()
    {
        var @enum = UInt64Enum.MinValue;
        var value = ulong.MinValue;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        @enum.ToUInt64().Should().Be(value);
    }
}



