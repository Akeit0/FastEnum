// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
#nullable enable

using System;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text;
using FastEnumUtility.UnitTests.Models;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Shouldly;

namespace FastEnumUtility.UnitTests.Cases.Reflections;



[TestClass]
public sealed class BasicSByteTests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<SByteEnum>().ShouldBe(typeof(sbyte));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<SByteEnum>();
        var actual = FastEnum.GetValues<SByteEnum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<SByteEnum>();
        var actual = FastEnum.GetNames<SByteEnum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<SByteEnum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const SByteEnum undefined = (SByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<SByteEnum>()
            .Select(static name =>
            {
                var value = Enum.Parse<SByteEnum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(SByteEnum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<SByteEnum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<SByteEnum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const SByteEnum undefined = (SByteEnum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<SByteEnum>();
        min.ShouldNotBeNull();
        min.ShouldBe(SByteEnum.MinValue);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<SByteEnum>();
        max.ShouldNotBeNull();
        max.ShouldBe(SByteEnum.MaxValue);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<SByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<SByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<SByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<SByteEnum>(SByteEnum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum>(SByteEnum.Zero).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum>(SByteEnum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum>((SByteEnum)123).ShouldBeFalse();

        //--- Extension methods
        SByteEnum.MinValue.IsDefined().ShouldBeTrue();
        SByteEnum.Zero.IsDefined().ShouldBeTrue();
        SByteEnum.MaxValue.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<SByteEnum>(nameof(SByteEnum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum>(nameof(SByteEnum.Zero)).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum>(nameof(SByteEnum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum>("123").ShouldBeFalse();
        FastEnum.IsDefined<SByteEnum>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<SByteEnum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<SByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<SByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<SByteEnum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum>("ABCDE", ignoreCase));
        FastEnum.Parse<SByteEnum>("123", ignoreCase).ShouldBe((SByteEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<SByteEnum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum>("ABCDE", ignoreCase));
        FastEnum.Parse<SByteEnum>("123", ignoreCase).ShouldBe((SByteEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<SByteEnum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<SByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<SByteEnum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<SByteEnum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((SByteEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<SByteEnum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<SByteEnum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((SByteEnum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        const SByteEnum value = SByteEnum.MaxValue;
        const string name = nameof(SByteEnum.MaxValue);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(SByteEnum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        SByteEnum.MinValue.ToName().ShouldBe(nameof(SByteEnum.MinValue));
        SByteEnum.Zero.ToName().ShouldBe(nameof(SByteEnum.Zero));
        SByteEnum.MaxValue.ToName().ShouldBe(nameof(SByteEnum.MaxValue));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        const SByteEnum @enum = SByteEnum.MinValue;
        const sbyte value = sbyte.MinValue;

        @enum.ToSByte().ShouldBe(value);
        Should.Throw<ArgumentException>(static () => @enum.ToByte());
        Should.Throw<ArgumentException>(static () => @enum.ToInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToInt64());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const SByteEnum undefined = (SByteEnum)123;
        var values = Enum.GetValues<SByteEnum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicByteTests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<ByteEnum>().ShouldBe(typeof(byte));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<ByteEnum>();
        var actual = FastEnum.GetValues<ByteEnum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<ByteEnum>();
        var actual = FastEnum.GetNames<ByteEnum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<ByteEnum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const ByteEnum undefined = (ByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<ByteEnum>()
            .Select(static name =>
            {
                var value = Enum.Parse<ByteEnum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(ByteEnum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<ByteEnum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<ByteEnum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const ByteEnum undefined = (ByteEnum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<ByteEnum>();
        min.ShouldNotBeNull();
        min.ShouldBe(ByteEnum.MinValue);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<ByteEnum>();
        max.ShouldNotBeNull();
        max.ShouldBe(ByteEnum.MaxValue);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<ByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<ByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<ByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<ByteEnum>(ByteEnum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<ByteEnum>(ByteEnum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<ByteEnum>((ByteEnum)123).ShouldBeFalse();

        //--- Extension methods
        ByteEnum.MinValue.IsDefined().ShouldBeTrue();
        ByteEnum.MaxValue.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<ByteEnum>(nameof(ByteEnum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<ByteEnum>(nameof(ByteEnum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<ByteEnum>("123").ShouldBeFalse();
        FastEnum.IsDefined<ByteEnum>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<ByteEnum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<ByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<ByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<ByteEnum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum>("ABCDE", ignoreCase));
        FastEnum.Parse<ByteEnum>("123", ignoreCase).ShouldBe((ByteEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<ByteEnum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum>("ABCDE", ignoreCase));
        FastEnum.Parse<ByteEnum>("123", ignoreCase).ShouldBe((ByteEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<ByteEnum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<ByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<ByteEnum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<ByteEnum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((ByteEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<ByteEnum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<ByteEnum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((ByteEnum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        const ByteEnum value = ByteEnum.MaxValue;
        const string name = nameof(ByteEnum.MaxValue);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(ByteEnum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        ByteEnum.MinValue.ToName().ShouldBe(nameof(ByteEnum.MinValue));
        ByteEnum.MaxValue.ToName().ShouldBe(nameof(ByteEnum.MaxValue));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        const ByteEnum @enum = ByteEnum.MinValue;
        const byte value = byte.MinValue;

        Should.Throw<ArgumentException>(static () => @enum.ToSByte());
        @enum.ToByte().ShouldBe(value);
        Should.Throw<ArgumentException>(static () => @enum.ToInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToInt64());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const ByteEnum undefined = (ByteEnum)123;
        var values = Enum.GetValues<ByteEnum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicInt16Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<Int16Enum>().ShouldBe(typeof(short));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<Int16Enum>();
        var actual = FastEnum.GetValues<Int16Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<Int16Enum>();
        var actual = FastEnum.GetNames<Int16Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int16Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const Int16Enum undefined = (Int16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<Int16Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<Int16Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(Int16Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<Int16Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int16Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const Int16Enum undefined = (Int16Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<Int16Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(Int16Enum.MinValue);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<Int16Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(Int16Enum.MaxValue);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<Int16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<Int16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<Int16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<Int16Enum>(Int16Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum>(Int16Enum.Zero).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum>(Int16Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum>((Int16Enum)123).ShouldBeFalse();

        //--- Extension methods
        Int16Enum.MinValue.IsDefined().ShouldBeTrue();
        Int16Enum.Zero.IsDefined().ShouldBeTrue();
        Int16Enum.MaxValue.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<Int16Enum>(nameof(Int16Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum>(nameof(Int16Enum.Zero)).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum>(nameof(Int16Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<Int16Enum>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int16Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<Int16Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<Int16Enum>("123", ignoreCase).ShouldBe((Int16Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int16Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<Int16Enum>("123", ignoreCase).ShouldBe((Int16Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int16Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<Int16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<Int16Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int16Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int16Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int16Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int16Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int16Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        const Int16Enum value = Int16Enum.MaxValue;
        const string name = nameof(Int16Enum.MaxValue);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(Int16Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        Int16Enum.MinValue.ToName().ShouldBe(nameof(Int16Enum.MinValue));
        Int16Enum.Zero.ToName().ShouldBe(nameof(Int16Enum.Zero));
        Int16Enum.MaxValue.ToName().ShouldBe(nameof(Int16Enum.MaxValue));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        const Int16Enum @enum = Int16Enum.MinValue;
        const short value = short.MinValue;

        Should.Throw<ArgumentException>(static () => @enum.ToSByte());
        Should.Throw<ArgumentException>(static () => @enum.ToByte());
        @enum.ToInt16().ShouldBe(value);
        Should.Throw<ArgumentException>(static () => @enum.ToUInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToInt64());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const Int16Enum undefined = (Int16Enum)123;
        var values = Enum.GetValues<Int16Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicUInt16Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<UInt16Enum>().ShouldBe(typeof(ushort));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<UInt16Enum>();
        var actual = FastEnum.GetValues<UInt16Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<UInt16Enum>();
        var actual = FastEnum.GetNames<UInt16Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt16Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const UInt16Enum undefined = (UInt16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<UInt16Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<UInt16Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(UInt16Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<UInt16Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt16Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const UInt16Enum undefined = (UInt16Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<UInt16Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(UInt16Enum.MinValue);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<UInt16Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(UInt16Enum.MaxValue);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<UInt16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<UInt16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<UInt16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<UInt16Enum>(UInt16Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt16Enum>(UInt16Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt16Enum>((UInt16Enum)123).ShouldBeFalse();

        //--- Extension methods
        UInt16Enum.MinValue.IsDefined().ShouldBeTrue();
        UInt16Enum.MaxValue.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<UInt16Enum>(nameof(UInt16Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt16Enum>(nameof(UInt16Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt16Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<UInt16Enum>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt16Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<UInt16Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt16Enum>("123", ignoreCase).ShouldBe((UInt16Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt16Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt16Enum>("123", ignoreCase).ShouldBe((UInt16Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt16Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<UInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<UInt16Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt16Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt16Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt16Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt16Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt16Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        const UInt16Enum value = UInt16Enum.MaxValue;
        const string name = nameof(UInt16Enum.MaxValue);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(UInt16Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        UInt16Enum.MinValue.ToName().ShouldBe(nameof(UInt16Enum.MinValue));
        UInt16Enum.MaxValue.ToName().ShouldBe(nameof(UInt16Enum.MaxValue));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        const UInt16Enum @enum = UInt16Enum.MinValue;
        const ushort value = ushort.MinValue;

        Should.Throw<ArgumentException>(static () => @enum.ToSByte());
        Should.Throw<ArgumentException>(static () => @enum.ToByte());
        Should.Throw<ArgumentException>(static () => @enum.ToInt16());
        @enum.ToUInt16().ShouldBe(value);
        Should.Throw<ArgumentException>(static () => @enum.ToInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToInt64());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const UInt16Enum undefined = (UInt16Enum)123;
        var values = Enum.GetValues<UInt16Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicInt32Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<Int32Enum>().ShouldBe(typeof(int));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<Int32Enum>();
        var actual = FastEnum.GetValues<Int32Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<Int32Enum>();
        var actual = FastEnum.GetNames<Int32Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int32Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const Int32Enum undefined = (Int32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<Int32Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<Int32Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(Int32Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<Int32Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int32Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const Int32Enum undefined = (Int32Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<Int32Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(Int32Enum.MinValue);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<Int32Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(Int32Enum.MaxValue);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<Int32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<Int32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<Int32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<Int32Enum>(Int32Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum>(Int32Enum.Zero).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum>(Int32Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum>((Int32Enum)123).ShouldBeFalse();

        //--- Extension methods
        Int32Enum.MinValue.IsDefined().ShouldBeTrue();
        Int32Enum.Zero.IsDefined().ShouldBeTrue();
        Int32Enum.MaxValue.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<Int32Enum>(nameof(Int32Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum>(nameof(Int32Enum.Zero)).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum>(nameof(Int32Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<Int32Enum>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int32Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<Int32Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<Int32Enum>("123", ignoreCase).ShouldBe((Int32Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int32Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<Int32Enum>("123", ignoreCase).ShouldBe((Int32Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int32Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<Int32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<Int32Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int32Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int32Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int32Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int32Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int32Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        const Int32Enum value = Int32Enum.MaxValue;
        const string name = nameof(Int32Enum.MaxValue);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(Int32Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        Int32Enum.MinValue.ToName().ShouldBe(nameof(Int32Enum.MinValue));
        Int32Enum.Zero.ToName().ShouldBe(nameof(Int32Enum.Zero));
        Int32Enum.MaxValue.ToName().ShouldBe(nameof(Int32Enum.MaxValue));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        const Int32Enum @enum = Int32Enum.MinValue;
        const int value = int.MinValue;

        Should.Throw<ArgumentException>(static () => @enum.ToSByte());
        Should.Throw<ArgumentException>(static () => @enum.ToByte());
        Should.Throw<ArgumentException>(static () => @enum.ToInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt16());
        @enum.ToInt32().ShouldBe(value);
        Should.Throw<ArgumentException>(static () => @enum.ToUInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToInt64());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const Int32Enum undefined = (Int32Enum)123;
        var values = Enum.GetValues<Int32Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicUInt32Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<UInt32Enum>().ShouldBe(typeof(uint));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<UInt32Enum>();
        var actual = FastEnum.GetValues<UInt32Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<UInt32Enum>();
        var actual = FastEnum.GetNames<UInt32Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt32Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const UInt32Enum undefined = (UInt32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<UInt32Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<UInt32Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(UInt32Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<UInt32Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt32Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const UInt32Enum undefined = (UInt32Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<UInt32Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(UInt32Enum.MinValue);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<UInt32Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(UInt32Enum.MaxValue);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<UInt32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<UInt32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<UInt32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<UInt32Enum>(UInt32Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt32Enum>(UInt32Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt32Enum>((UInt32Enum)123).ShouldBeFalse();

        //--- Extension methods
        UInt32Enum.MinValue.IsDefined().ShouldBeTrue();
        UInt32Enum.MaxValue.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<UInt32Enum>(nameof(UInt32Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt32Enum>(nameof(UInt32Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt32Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<UInt32Enum>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt32Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<UInt32Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt32Enum>("123", ignoreCase).ShouldBe((UInt32Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt32Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt32Enum>("123", ignoreCase).ShouldBe((UInt32Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt32Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<UInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<UInt32Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt32Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt32Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt32Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt32Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt32Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        const UInt32Enum value = UInt32Enum.MaxValue;
        const string name = nameof(UInt32Enum.MaxValue);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(UInt32Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        UInt32Enum.MinValue.ToName().ShouldBe(nameof(UInt32Enum.MinValue));
        UInt32Enum.MaxValue.ToName().ShouldBe(nameof(UInt32Enum.MaxValue));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        const UInt32Enum @enum = UInt32Enum.MinValue;
        const uint value = uint.MinValue;

        Should.Throw<ArgumentException>(static () => @enum.ToSByte());
        Should.Throw<ArgumentException>(static () => @enum.ToByte());
        Should.Throw<ArgumentException>(static () => @enum.ToInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToInt32());
        @enum.ToUInt32().ShouldBe(value);
        Should.Throw<ArgumentException>(static () => @enum.ToInt64());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const UInt32Enum undefined = (UInt32Enum)123;
        var values = Enum.GetValues<UInt32Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicInt64Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<Int64Enum>().ShouldBe(typeof(long));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<Int64Enum>();
        var actual = FastEnum.GetValues<Int64Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<Int64Enum>();
        var actual = FastEnum.GetNames<Int64Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int64Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const Int64Enum undefined = (Int64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<Int64Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<Int64Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(Int64Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<Int64Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int64Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const Int64Enum undefined = (Int64Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<Int64Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(Int64Enum.MinValue);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<Int64Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(Int64Enum.MaxValue);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<Int64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<Int64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<Int64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<Int64Enum>(Int64Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum>(Int64Enum.Zero).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum>(Int64Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum>((Int64Enum)123).ShouldBeFalse();

        //--- Extension methods
        Int64Enum.MinValue.IsDefined().ShouldBeTrue();
        Int64Enum.Zero.IsDefined().ShouldBeTrue();
        Int64Enum.MaxValue.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<Int64Enum>(nameof(Int64Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum>(nameof(Int64Enum.Zero)).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum>(nameof(Int64Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<Int64Enum>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int64Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<Int64Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<Int64Enum>("123", ignoreCase).ShouldBe((Int64Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int64Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<Int64Enum>("123", ignoreCase).ShouldBe((Int64Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int64Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<Int64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<Int64Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int64Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int64Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int64Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int64Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int64Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        const Int64Enum value = Int64Enum.MaxValue;
        const string name = nameof(Int64Enum.MaxValue);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(Int64Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        Int64Enum.MinValue.ToName().ShouldBe(nameof(Int64Enum.MinValue));
        Int64Enum.Zero.ToName().ShouldBe(nameof(Int64Enum.Zero));
        Int64Enum.MaxValue.ToName().ShouldBe(nameof(Int64Enum.MaxValue));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        const Int64Enum @enum = Int64Enum.MinValue;
        const long value = long.MinValue;

        Should.Throw<ArgumentException>(static () => @enum.ToSByte());
        Should.Throw<ArgumentException>(static () => @enum.ToByte());
        Should.Throw<ArgumentException>(static () => @enum.ToInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt32());
        @enum.ToInt64().ShouldBe(value);
        Should.Throw<ArgumentException>(static () => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const Int64Enum undefined = (Int64Enum)123;
        var values = Enum.GetValues<Int64Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicUInt64Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<UInt64Enum>().ShouldBe(typeof(ulong));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<UInt64Enum>();
        var actual = FastEnum.GetValues<UInt64Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<UInt64Enum>();
        var actual = FastEnum.GetNames<UInt64Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt64Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const UInt64Enum undefined = (UInt64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<UInt64Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<UInt64Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(UInt64Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<UInt64Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt64Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const UInt64Enum undefined = (UInt64Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<UInt64Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(UInt64Enum.MinValue);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<UInt64Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(UInt64Enum.MaxValue);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<UInt64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<UInt64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<UInt64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<UInt64Enum>(UInt64Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt64Enum>(UInt64Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt64Enum>((UInt64Enum)123).ShouldBeFalse();

        //--- Extension methods
        UInt64Enum.MinValue.IsDefined().ShouldBeTrue();
        UInt64Enum.MaxValue.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<UInt64Enum>(nameof(UInt64Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt64Enum>(nameof(UInt64Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt64Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<UInt64Enum>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt64Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<UInt64Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt64Enum>("123", ignoreCase).ShouldBe((UInt64Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt64Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt64Enum>("123", ignoreCase).ShouldBe((UInt64Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt64Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<UInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<UInt64Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt64Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt64Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt64Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt64Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt64Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        const UInt64Enum value = UInt64Enum.MaxValue;
        const string name = nameof(UInt64Enum.MaxValue);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(UInt64Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        UInt64Enum.MinValue.ToName().ShouldBe(nameof(UInt64Enum.MinValue));
        UInt64Enum.MaxValue.ToName().ShouldBe(nameof(UInt64Enum.MaxValue));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        const UInt64Enum @enum = UInt64Enum.MinValue;
        const ulong value = ulong.MinValue;

        Should.Throw<ArgumentException>(static () => @enum.ToSByte());
        Should.Throw<ArgumentException>(static () => @enum.ToByte());
        Should.Throw<ArgumentException>(static () => @enum.ToInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt16());
        Should.Throw<ArgumentException>(static () => @enum.ToInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToUInt32());
        Should.Throw<ArgumentException>(static () => @enum.ToInt64());
        @enum.ToUInt64().ShouldBe(value);
    }


    [TestMethod]
    public void FastToString()
    {
        const UInt64Enum undefined = (UInt64Enum)123;
        var values = Enum.GetValues<UInt64Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



