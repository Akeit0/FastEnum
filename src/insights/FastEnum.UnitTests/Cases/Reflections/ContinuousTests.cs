// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
#nullable enable

using System;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text;
using FastEnumUtility.UnitTests.Models;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace FastEnumUtility.UnitTests.Cases.Reflections;



[TestClass]
public sealed class ContinuousSByteTests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<ContinuousSByteEnum>().Should().Be<sbyte>();


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<ContinuousSByteEnum>();
        var actual = FastEnum.GetValues<ContinuousSByteEnum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<ContinuousSByteEnum>();
        var actual = FastEnum.GetNames<ContinuousSByteEnum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        {
            const ContinuousSByteEnum defined = ContinuousSByteEnum.A;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const ContinuousSByteEnum undefined = (ContinuousSByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<ContinuousSByteEnum>()
            .Select(static name =>
            {
                var value = Enum.Parse<ContinuousSByteEnum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(ContinuousSByteEnum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<ContinuousSByteEnum>();

        actual.Length.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.NameUtf8.Should().Equal(e.nameUtf8);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        {
            const ContinuousSByteEnum defined = ContinuousSByteEnum.A;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.NameUtf8.Should().Equal(expect.nameUtf8);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const ContinuousSByteEnum undefined = (ContinuousSByteEnum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<ContinuousSByteEnum>();
        min.Should().NotBeNull();
        min.Should().Be(ContinuousSByteEnum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<ContinuousSByteEnum>();
        max.Should().NotBeNull();
        max.Should().Be(ContinuousSByteEnum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<ContinuousSByteEnum>().Should().Be(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<ContinuousSByteEnum>().Should().Be(true);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<ContinuousSByteEnum>().Should().Be(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<ContinuousSByteEnum>(ContinuousSByteEnum.A).Should().BeTrue();
        FastEnum.IsDefined<ContinuousSByteEnum>(ContinuousSByteEnum.B).Should().BeTrue();
        FastEnum.IsDefined<ContinuousSByteEnum>(ContinuousSByteEnum.C).Should().BeTrue();
        FastEnum.IsDefined<ContinuousSByteEnum>((ContinuousSByteEnum)123).Should().BeFalse();

        //--- Extension methods
        ContinuousSByteEnum.A.IsDefined().Should().BeTrue();
        ContinuousSByteEnum.B.IsDefined().Should().BeTrue();
        ContinuousSByteEnum.C.IsDefined().Should().BeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<ContinuousSByteEnum>(nameof(ContinuousSByteEnum.A)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousSByteEnum>(nameof(ContinuousSByteEnum.B)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousSByteEnum>(nameof(ContinuousSByteEnum.C)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousSByteEnum>("123").Should().BeFalse();
        FastEnum.IsDefined<ContinuousSByteEnum>("value").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: ContinuousSByteEnum.A, name: nameof(ContinuousSByteEnum.A), valueString: ((sbyte)ContinuousSByteEnum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousSByteEnum.B, name: nameof(ContinuousSByteEnum.B), valueString: ((sbyte)ContinuousSByteEnum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousSByteEnum.C, name: nameof(ContinuousSByteEnum.C), valueString: ((sbyte)ContinuousSByteEnum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousSByteEnum>(x.name).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<ContinuousSByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture))).Should().Throw<ArgumentException>();
            FastEnum.Parse<ContinuousSByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousSByteEnum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousSByteEnum>(x.valueString.ToLower(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousSByteEnum>(x.valueString.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousSByteEnum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousSByteEnum>("")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousSByteEnum>(" ")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousSByteEnum>("ABCDE")).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousSByteEnum>("123").Should().Be((ContinuousSByteEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousSByteEnum.A, name: nameof(ContinuousSByteEnum.A), valueString: ((sbyte)ContinuousSByteEnum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousSByteEnum.B, name: nameof(ContinuousSByteEnum.B), valueString: ((sbyte)ContinuousSByteEnum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousSByteEnum.C, name: nameof(ContinuousSByteEnum.C), valueString: ((sbyte)ContinuousSByteEnum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousSByteEnum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<ContinuousSByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousSByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousSByteEnum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousSByteEnum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousSByteEnum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousSByteEnum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousSByteEnum>("", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousSByteEnum>(" ", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousSByteEnum>("ABCDE", true)).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousSByteEnum>("123").Should().Be((ContinuousSByteEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: ContinuousSByteEnum.A, name: nameof(ContinuousSByteEnum.A), valueString: ((sbyte)ContinuousSByteEnum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousSByteEnum.B, name: nameof(ContinuousSByteEnum.B), valueString: ((sbyte)ContinuousSByteEnum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousSByteEnum.C, name: nameof(ContinuousSByteEnum.C), valueString: ((sbyte)ContinuousSByteEnum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousSByteEnum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousSByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), out var _).Should().BeFalse();
            FastEnum.TryParse<ContinuousSByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), out var _).Should().BeTrue();

            FastEnum.TryParse<ContinuousSByteEnum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousSByteEnum>(x.valueString.ToLower(CultureInfo.InvariantCulture), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousSByteEnum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousSByteEnum>((string?)null, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousSByteEnum>("", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousSByteEnum>(" ", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousSByteEnum>("ABCDE", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousSByteEnum>("123", out var r).Should().BeTrue();
        r.Should().Be((ContinuousSByteEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousSByteEnum.A, name: nameof(ContinuousSByteEnum.A), valueString: ((sbyte)ContinuousSByteEnum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousSByteEnum.B, name: nameof(ContinuousSByteEnum.B), valueString: ((sbyte)ContinuousSByteEnum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousSByteEnum.C, name: nameof(ContinuousSByteEnum.C), valueString: ((sbyte)ContinuousSByteEnum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousSByteEnum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousSByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousSByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousSByteEnum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<ContinuousSByteEnum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<ContinuousSByteEnum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousSByteEnum>((string?)null, true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousSByteEnum>("", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousSByteEnum>(" ", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousSByteEnum>("ABCDE", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousSByteEnum>("123", true, out var r).Should().BeTrue();
        r.Should().Be((ContinuousSByteEnum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = ContinuousSByteEnum.A;
        var name = nameof(ContinuousSByteEnum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(ContinuousSByteEnum).GetField(name);

        member.Should().NotBeNull();
        member.Name.Should().Be(name);
        member.NameUtf8.Should().Equal(nameUtf8);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [TestMethod]
    public void ToName()
    {
        ContinuousSByteEnum.A.ToName().Should().Be(nameof(ContinuousSByteEnum.A));
        ContinuousSByteEnum.B.ToName().Should().Be(nameof(ContinuousSByteEnum.B));
        ContinuousSByteEnum.C.ToName().Should().Be(nameof(ContinuousSByteEnum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = ContinuousSByteEnum.A;
        const sbyte value = 1;

        @enum.ToSByte().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }


    [TestMethod]
    public void FastToString()
    {
        const ContinuousSByteEnum undefined = (ContinuousSByteEnum)123;
        var values = Enum.GetValues<ContinuousSByteEnum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class ContinuousByteTests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<ContinuousByteEnum>().Should().Be<byte>();


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<ContinuousByteEnum>();
        var actual = FastEnum.GetValues<ContinuousByteEnum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<ContinuousByteEnum>();
        var actual = FastEnum.GetNames<ContinuousByteEnum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        {
            const ContinuousByteEnum defined = ContinuousByteEnum.A;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const ContinuousByteEnum undefined = (ContinuousByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<ContinuousByteEnum>()
            .Select(static name =>
            {
                var value = Enum.Parse<ContinuousByteEnum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(ContinuousByteEnum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<ContinuousByteEnum>();

        actual.Length.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.NameUtf8.Should().Equal(e.nameUtf8);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        {
            const ContinuousByteEnum defined = ContinuousByteEnum.A;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.NameUtf8.Should().Equal(expect.nameUtf8);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const ContinuousByteEnum undefined = (ContinuousByteEnum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<ContinuousByteEnum>();
        min.Should().NotBeNull();
        min.Should().Be(ContinuousByteEnum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<ContinuousByteEnum>();
        max.Should().NotBeNull();
        max.Should().Be(ContinuousByteEnum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<ContinuousByteEnum>().Should().Be(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<ContinuousByteEnum>().Should().Be(true);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<ContinuousByteEnum>().Should().Be(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<ContinuousByteEnum>(ContinuousByteEnum.A).Should().BeTrue();
        FastEnum.IsDefined<ContinuousByteEnum>(ContinuousByteEnum.B).Should().BeTrue();
        FastEnum.IsDefined<ContinuousByteEnum>(ContinuousByteEnum.C).Should().BeTrue();
        FastEnum.IsDefined<ContinuousByteEnum>((ContinuousByteEnum)123).Should().BeFalse();

        //--- Extension methods
        ContinuousByteEnum.A.IsDefined().Should().BeTrue();
        ContinuousByteEnum.B.IsDefined().Should().BeTrue();
        ContinuousByteEnum.C.IsDefined().Should().BeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<ContinuousByteEnum>(nameof(ContinuousByteEnum.A)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousByteEnum>(nameof(ContinuousByteEnum.B)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousByteEnum>(nameof(ContinuousByteEnum.C)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousByteEnum>("123").Should().BeFalse();
        FastEnum.IsDefined<ContinuousByteEnum>("value").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: ContinuousByteEnum.A, name: nameof(ContinuousByteEnum.A), valueString: ((byte)ContinuousByteEnum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousByteEnum.B, name: nameof(ContinuousByteEnum.B), valueString: ((byte)ContinuousByteEnum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousByteEnum.C, name: nameof(ContinuousByteEnum.C), valueString: ((byte)ContinuousByteEnum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousByteEnum>(x.name).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<ContinuousByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture))).Should().Throw<ArgumentException>();
            FastEnum.Parse<ContinuousByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousByteEnum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousByteEnum>(x.valueString.ToLower(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousByteEnum>(x.valueString.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousByteEnum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousByteEnum>("")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousByteEnum>(" ")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousByteEnum>("ABCDE")).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousByteEnum>("123").Should().Be((ContinuousByteEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousByteEnum.A, name: nameof(ContinuousByteEnum.A), valueString: ((byte)ContinuousByteEnum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousByteEnum.B, name: nameof(ContinuousByteEnum.B), valueString: ((byte)ContinuousByteEnum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousByteEnum.C, name: nameof(ContinuousByteEnum.C), valueString: ((byte)ContinuousByteEnum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousByteEnum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<ContinuousByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousByteEnum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousByteEnum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousByteEnum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousByteEnum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousByteEnum>("", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousByteEnum>(" ", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousByteEnum>("ABCDE", true)).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousByteEnum>("123").Should().Be((ContinuousByteEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: ContinuousByteEnum.A, name: nameof(ContinuousByteEnum.A), valueString: ((byte)ContinuousByteEnum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousByteEnum.B, name: nameof(ContinuousByteEnum.B), valueString: ((byte)ContinuousByteEnum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousByteEnum.C, name: nameof(ContinuousByteEnum.C), valueString: ((byte)ContinuousByteEnum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousByteEnum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), out var _).Should().BeFalse();
            FastEnum.TryParse<ContinuousByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), out var _).Should().BeTrue();

            FastEnum.TryParse<ContinuousByteEnum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousByteEnum>(x.valueString.ToLower(CultureInfo.InvariantCulture), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousByteEnum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousByteEnum>((string?)null, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousByteEnum>("", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousByteEnum>(" ", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousByteEnum>("ABCDE", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousByteEnum>("123", out var r).Should().BeTrue();
        r.Should().Be((ContinuousByteEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousByteEnum.A, name: nameof(ContinuousByteEnum.A), valueString: ((byte)ContinuousByteEnum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousByteEnum.B, name: nameof(ContinuousByteEnum.B), valueString: ((byte)ContinuousByteEnum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousByteEnum.C, name: nameof(ContinuousByteEnum.C), valueString: ((byte)ContinuousByteEnum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousByteEnum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousByteEnum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<ContinuousByteEnum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<ContinuousByteEnum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousByteEnum>((string?)null, true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousByteEnum>("", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousByteEnum>(" ", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousByteEnum>("ABCDE", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousByteEnum>("123", true, out var r).Should().BeTrue();
        r.Should().Be((ContinuousByteEnum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = ContinuousByteEnum.A;
        var name = nameof(ContinuousByteEnum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(ContinuousByteEnum).GetField(name);

        member.Should().NotBeNull();
        member.Name.Should().Be(name);
        member.NameUtf8.Should().Equal(nameUtf8);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [TestMethod]
    public void ToName()
    {
        ContinuousByteEnum.A.ToName().Should().Be(nameof(ContinuousByteEnum.A));
        ContinuousByteEnum.B.ToName().Should().Be(nameof(ContinuousByteEnum.B));
        ContinuousByteEnum.C.ToName().Should().Be(nameof(ContinuousByteEnum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = ContinuousByteEnum.A;
        const byte value = 1;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        @enum.ToByte().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }


    [TestMethod]
    public void FastToString()
    {
        const ContinuousByteEnum undefined = (ContinuousByteEnum)123;
        var values = Enum.GetValues<ContinuousByteEnum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class ContinuousInt16Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<ContinuousInt16Enum>().Should().Be<short>();


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<ContinuousInt16Enum>();
        var actual = FastEnum.GetValues<ContinuousInt16Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<ContinuousInt16Enum>();
        var actual = FastEnum.GetNames<ContinuousInt16Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        {
            const ContinuousInt16Enum defined = ContinuousInt16Enum.A;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const ContinuousInt16Enum undefined = (ContinuousInt16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<ContinuousInt16Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<ContinuousInt16Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(ContinuousInt16Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<ContinuousInt16Enum>();

        actual.Length.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.NameUtf8.Should().Equal(e.nameUtf8);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        {
            const ContinuousInt16Enum defined = ContinuousInt16Enum.A;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.NameUtf8.Should().Equal(expect.nameUtf8);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const ContinuousInt16Enum undefined = (ContinuousInt16Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<ContinuousInt16Enum>();
        min.Should().NotBeNull();
        min.Should().Be(ContinuousInt16Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<ContinuousInt16Enum>();
        max.Should().NotBeNull();
        max.Should().Be(ContinuousInt16Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<ContinuousInt16Enum>().Should().Be(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<ContinuousInt16Enum>().Should().Be(true);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<ContinuousInt16Enum>().Should().Be(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<ContinuousInt16Enum>(ContinuousInt16Enum.A).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt16Enum>(ContinuousInt16Enum.B).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt16Enum>(ContinuousInt16Enum.C).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt16Enum>((ContinuousInt16Enum)123).Should().BeFalse();

        //--- Extension methods
        ContinuousInt16Enum.A.IsDefined().Should().BeTrue();
        ContinuousInt16Enum.B.IsDefined().Should().BeTrue();
        ContinuousInt16Enum.C.IsDefined().Should().BeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<ContinuousInt16Enum>(nameof(ContinuousInt16Enum.A)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt16Enum>(nameof(ContinuousInt16Enum.B)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt16Enum>(nameof(ContinuousInt16Enum.C)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt16Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<ContinuousInt16Enum>("value").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: ContinuousInt16Enum.A, name: nameof(ContinuousInt16Enum.A), valueString: ((short)ContinuousInt16Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt16Enum.B, name: nameof(ContinuousInt16Enum.B), valueString: ((short)ContinuousInt16Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt16Enum.C, name: nameof(ContinuousInt16Enum.C), valueString: ((short)ContinuousInt16Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousInt16Enum>(x.name).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<ContinuousInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture))).Should().Throw<ArgumentException>();
            FastEnum.Parse<ContinuousInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt16Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt16Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt16Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt16Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt16Enum>("")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt16Enum>(" ")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt16Enum>("ABCDE")).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousInt16Enum>("123").Should().Be((ContinuousInt16Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousInt16Enum.A, name: nameof(ContinuousInt16Enum.A), valueString: ((short)ContinuousInt16Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt16Enum.B, name: nameof(ContinuousInt16Enum.B), valueString: ((short)ContinuousInt16Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt16Enum.C, name: nameof(ContinuousInt16Enum.C), valueString: ((short)ContinuousInt16Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousInt16Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt16Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt16Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt16Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt16Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt16Enum>("", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt16Enum>(" ", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt16Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousInt16Enum>("123").Should().Be((ContinuousInt16Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: ContinuousInt16Enum.A, name: nameof(ContinuousInt16Enum.A), valueString: ((short)ContinuousInt16Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt16Enum.B, name: nameof(ContinuousInt16Enum.B), valueString: ((short)ContinuousInt16Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt16Enum.C, name: nameof(ContinuousInt16Enum.C), valueString: ((short)ContinuousInt16Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousInt16Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), out var _).Should().BeFalse();
            FastEnum.TryParse<ContinuousInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), out var _).Should().BeTrue();

            FastEnum.TryParse<ContinuousInt16Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt16Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt16Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousInt16Enum>((string?)null, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt16Enum>("", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt16Enum>(" ", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt16Enum>("ABCDE", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt16Enum>("123", out var r).Should().BeTrue();
        r.Should().Be((ContinuousInt16Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousInt16Enum.A, name: nameof(ContinuousInt16Enum.A), valueString: ((short)ContinuousInt16Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt16Enum.B, name: nameof(ContinuousInt16Enum.B), valueString: ((short)ContinuousInt16Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt16Enum.C, name: nameof(ContinuousInt16Enum.C), valueString: ((short)ContinuousInt16Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousInt16Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt16Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt16Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt16Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousInt16Enum>((string?)null, true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt16Enum>("", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt16Enum>(" ", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt16Enum>("ABCDE", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt16Enum>("123", true, out var r).Should().BeTrue();
        r.Should().Be((ContinuousInt16Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = ContinuousInt16Enum.A;
        var name = nameof(ContinuousInt16Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(ContinuousInt16Enum).GetField(name);

        member.Should().NotBeNull();
        member.Name.Should().Be(name);
        member.NameUtf8.Should().Equal(nameUtf8);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [TestMethod]
    public void ToName()
    {
        ContinuousInt16Enum.A.ToName().Should().Be(nameof(ContinuousInt16Enum.A));
        ContinuousInt16Enum.B.ToName().Should().Be(nameof(ContinuousInt16Enum.B));
        ContinuousInt16Enum.C.ToName().Should().Be(nameof(ContinuousInt16Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = ContinuousInt16Enum.A;
        const short value = 1;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        @enum.ToInt16().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }


    [TestMethod]
    public void FastToString()
    {
        const ContinuousInt16Enum undefined = (ContinuousInt16Enum)123;
        var values = Enum.GetValues<ContinuousInt16Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class ContinuousUInt16Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<ContinuousUInt16Enum>().Should().Be<ushort>();


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<ContinuousUInt16Enum>();
        var actual = FastEnum.GetValues<ContinuousUInt16Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<ContinuousUInt16Enum>();
        var actual = FastEnum.GetNames<ContinuousUInt16Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        {
            const ContinuousUInt16Enum defined = ContinuousUInt16Enum.A;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const ContinuousUInt16Enum undefined = (ContinuousUInt16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<ContinuousUInt16Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<ContinuousUInt16Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(ContinuousUInt16Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<ContinuousUInt16Enum>();

        actual.Length.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.NameUtf8.Should().Equal(e.nameUtf8);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        {
            const ContinuousUInt16Enum defined = ContinuousUInt16Enum.A;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.NameUtf8.Should().Equal(expect.nameUtf8);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const ContinuousUInt16Enum undefined = (ContinuousUInt16Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<ContinuousUInt16Enum>();
        min.Should().NotBeNull();
        min.Should().Be(ContinuousUInt16Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<ContinuousUInt16Enum>();
        max.Should().NotBeNull();
        max.Should().Be(ContinuousUInt16Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<ContinuousUInt16Enum>().Should().Be(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<ContinuousUInt16Enum>().Should().Be(true);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<ContinuousUInt16Enum>().Should().Be(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<ContinuousUInt16Enum>(ContinuousUInt16Enum.A).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt16Enum>(ContinuousUInt16Enum.B).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt16Enum>(ContinuousUInt16Enum.C).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt16Enum>((ContinuousUInt16Enum)123).Should().BeFalse();

        //--- Extension methods
        ContinuousUInt16Enum.A.IsDefined().Should().BeTrue();
        ContinuousUInt16Enum.B.IsDefined().Should().BeTrue();
        ContinuousUInt16Enum.C.IsDefined().Should().BeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<ContinuousUInt16Enum>(nameof(ContinuousUInt16Enum.A)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt16Enum>(nameof(ContinuousUInt16Enum.B)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt16Enum>(nameof(ContinuousUInt16Enum.C)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt16Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<ContinuousUInt16Enum>("value").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt16Enum.A, name: nameof(ContinuousUInt16Enum.A), valueString: ((ushort)ContinuousUInt16Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt16Enum.B, name: nameof(ContinuousUInt16Enum.B), valueString: ((ushort)ContinuousUInt16Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt16Enum.C, name: nameof(ContinuousUInt16Enum.C), valueString: ((ushort)ContinuousUInt16Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousUInt16Enum>(x.name).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<ContinuousUInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture))).Should().Throw<ArgumentException>();
            FastEnum.Parse<ContinuousUInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt16Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt16Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt16Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt16Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt16Enum>("")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt16Enum>(" ")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt16Enum>("ABCDE")).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousUInt16Enum>("123").Should().Be((ContinuousUInt16Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt16Enum.A, name: nameof(ContinuousUInt16Enum.A), valueString: ((ushort)ContinuousUInt16Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt16Enum.B, name: nameof(ContinuousUInt16Enum.B), valueString: ((ushort)ContinuousUInt16Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt16Enum.C, name: nameof(ContinuousUInt16Enum.C), valueString: ((ushort)ContinuousUInt16Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousUInt16Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt16Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt16Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt16Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt16Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt16Enum>("", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt16Enum>(" ", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt16Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousUInt16Enum>("123").Should().Be((ContinuousUInt16Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt16Enum.A, name: nameof(ContinuousUInt16Enum.A), valueString: ((ushort)ContinuousUInt16Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt16Enum.B, name: nameof(ContinuousUInt16Enum.B), valueString: ((ushort)ContinuousUInt16Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt16Enum.C, name: nameof(ContinuousUInt16Enum.C), valueString: ((ushort)ContinuousUInt16Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousUInt16Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), out var _).Should().BeFalse();
            FastEnum.TryParse<ContinuousUInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), out var _).Should().BeTrue();

            FastEnum.TryParse<ContinuousUInt16Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt16Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt16Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousUInt16Enum>((string?)null, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt16Enum>("", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt16Enum>(" ", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt16Enum>("ABCDE", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt16Enum>("123", out var r).Should().BeTrue();
        r.Should().Be((ContinuousUInt16Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt16Enum.A, name: nameof(ContinuousUInt16Enum.A), valueString: ((ushort)ContinuousUInt16Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt16Enum.B, name: nameof(ContinuousUInt16Enum.B), valueString: ((ushort)ContinuousUInt16Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt16Enum.C, name: nameof(ContinuousUInt16Enum.C), valueString: ((ushort)ContinuousUInt16Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousUInt16Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt16Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt16Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt16Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousUInt16Enum>((string?)null, true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt16Enum>("", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt16Enum>(" ", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt16Enum>("ABCDE", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt16Enum>("123", true, out var r).Should().BeTrue();
        r.Should().Be((ContinuousUInt16Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = ContinuousUInt16Enum.A;
        var name = nameof(ContinuousUInt16Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(ContinuousUInt16Enum).GetField(name);

        member.Should().NotBeNull();
        member.Name.Should().Be(name);
        member.NameUtf8.Should().Equal(nameUtf8);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [TestMethod]
    public void ToName()
    {
        ContinuousUInt16Enum.A.ToName().Should().Be(nameof(ContinuousUInt16Enum.A));
        ContinuousUInt16Enum.B.ToName().Should().Be(nameof(ContinuousUInt16Enum.B));
        ContinuousUInt16Enum.C.ToName().Should().Be(nameof(ContinuousUInt16Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = ContinuousUInt16Enum.A;
        const ushort value = 1;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        @enum.ToUInt16().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }


    [TestMethod]
    public void FastToString()
    {
        const ContinuousUInt16Enum undefined = (ContinuousUInt16Enum)123;
        var values = Enum.GetValues<ContinuousUInt16Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class ContinuousInt32Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<ContinuousInt32Enum>().Should().Be<int>();


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<ContinuousInt32Enum>();
        var actual = FastEnum.GetValues<ContinuousInt32Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<ContinuousInt32Enum>();
        var actual = FastEnum.GetNames<ContinuousInt32Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        {
            const ContinuousInt32Enum defined = ContinuousInt32Enum.A;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const ContinuousInt32Enum undefined = (ContinuousInt32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<ContinuousInt32Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<ContinuousInt32Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(ContinuousInt32Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<ContinuousInt32Enum>();

        actual.Length.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.NameUtf8.Should().Equal(e.nameUtf8);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        {
            const ContinuousInt32Enum defined = ContinuousInt32Enum.A;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.NameUtf8.Should().Equal(expect.nameUtf8);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const ContinuousInt32Enum undefined = (ContinuousInt32Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<ContinuousInt32Enum>();
        min.Should().NotBeNull();
        min.Should().Be(ContinuousInt32Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<ContinuousInt32Enum>();
        max.Should().NotBeNull();
        max.Should().Be(ContinuousInt32Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<ContinuousInt32Enum>().Should().Be(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<ContinuousInt32Enum>().Should().Be(true);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<ContinuousInt32Enum>().Should().Be(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<ContinuousInt32Enum>(ContinuousInt32Enum.A).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt32Enum>(ContinuousInt32Enum.B).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt32Enum>(ContinuousInt32Enum.C).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt32Enum>((ContinuousInt32Enum)123).Should().BeFalse();

        //--- Extension methods
        ContinuousInt32Enum.A.IsDefined().Should().BeTrue();
        ContinuousInt32Enum.B.IsDefined().Should().BeTrue();
        ContinuousInt32Enum.C.IsDefined().Should().BeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<ContinuousInt32Enum>(nameof(ContinuousInt32Enum.A)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt32Enum>(nameof(ContinuousInt32Enum.B)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt32Enum>(nameof(ContinuousInt32Enum.C)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt32Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<ContinuousInt32Enum>("value").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: ContinuousInt32Enum.A, name: nameof(ContinuousInt32Enum.A), valueString: ((int)ContinuousInt32Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt32Enum.B, name: nameof(ContinuousInt32Enum.B), valueString: ((int)ContinuousInt32Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt32Enum.C, name: nameof(ContinuousInt32Enum.C), valueString: ((int)ContinuousInt32Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousInt32Enum>(x.name).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<ContinuousInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture))).Should().Throw<ArgumentException>();
            FastEnum.Parse<ContinuousInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt32Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt32Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt32Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt32Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt32Enum>("")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt32Enum>(" ")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt32Enum>("ABCDE")).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousInt32Enum>("123").Should().Be((ContinuousInt32Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousInt32Enum.A, name: nameof(ContinuousInt32Enum.A), valueString: ((int)ContinuousInt32Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt32Enum.B, name: nameof(ContinuousInt32Enum.B), valueString: ((int)ContinuousInt32Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt32Enum.C, name: nameof(ContinuousInt32Enum.C), valueString: ((int)ContinuousInt32Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousInt32Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt32Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt32Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt32Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt32Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt32Enum>("", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt32Enum>(" ", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt32Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousInt32Enum>("123").Should().Be((ContinuousInt32Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: ContinuousInt32Enum.A, name: nameof(ContinuousInt32Enum.A), valueString: ((int)ContinuousInt32Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt32Enum.B, name: nameof(ContinuousInt32Enum.B), valueString: ((int)ContinuousInt32Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt32Enum.C, name: nameof(ContinuousInt32Enum.C), valueString: ((int)ContinuousInt32Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousInt32Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), out var _).Should().BeFalse();
            FastEnum.TryParse<ContinuousInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), out var _).Should().BeTrue();

            FastEnum.TryParse<ContinuousInt32Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt32Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt32Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousInt32Enum>((string?)null, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt32Enum>("", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt32Enum>(" ", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt32Enum>("ABCDE", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt32Enum>("123", out var r).Should().BeTrue();
        r.Should().Be((ContinuousInt32Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousInt32Enum.A, name: nameof(ContinuousInt32Enum.A), valueString: ((int)ContinuousInt32Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt32Enum.B, name: nameof(ContinuousInt32Enum.B), valueString: ((int)ContinuousInt32Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt32Enum.C, name: nameof(ContinuousInt32Enum.C), valueString: ((int)ContinuousInt32Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousInt32Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt32Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt32Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt32Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousInt32Enum>((string?)null, true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt32Enum>("", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt32Enum>(" ", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt32Enum>("ABCDE", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt32Enum>("123", true, out var r).Should().BeTrue();
        r.Should().Be((ContinuousInt32Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = ContinuousInt32Enum.A;
        var name = nameof(ContinuousInt32Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(ContinuousInt32Enum).GetField(name);

        member.Should().NotBeNull();
        member.Name.Should().Be(name);
        member.NameUtf8.Should().Equal(nameUtf8);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [TestMethod]
    public void ToName()
    {
        ContinuousInt32Enum.A.ToName().Should().Be(nameof(ContinuousInt32Enum.A));
        ContinuousInt32Enum.B.ToName().Should().Be(nameof(ContinuousInt32Enum.B));
        ContinuousInt32Enum.C.ToName().Should().Be(nameof(ContinuousInt32Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = ContinuousInt32Enum.A;
        const int value = 1;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        @enum.ToInt32().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }


    [TestMethod]
    public void FastToString()
    {
        const ContinuousInt32Enum undefined = (ContinuousInt32Enum)123;
        var values = Enum.GetValues<ContinuousInt32Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class ContinuousUInt32Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<ContinuousUInt32Enum>().Should().Be<uint>();


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<ContinuousUInt32Enum>();
        var actual = FastEnum.GetValues<ContinuousUInt32Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<ContinuousUInt32Enum>();
        var actual = FastEnum.GetNames<ContinuousUInt32Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        {
            const ContinuousUInt32Enum defined = ContinuousUInt32Enum.A;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const ContinuousUInt32Enum undefined = (ContinuousUInt32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<ContinuousUInt32Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<ContinuousUInt32Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(ContinuousUInt32Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<ContinuousUInt32Enum>();

        actual.Length.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.NameUtf8.Should().Equal(e.nameUtf8);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        {
            const ContinuousUInt32Enum defined = ContinuousUInt32Enum.A;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.NameUtf8.Should().Equal(expect.nameUtf8);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const ContinuousUInt32Enum undefined = (ContinuousUInt32Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<ContinuousUInt32Enum>();
        min.Should().NotBeNull();
        min.Should().Be(ContinuousUInt32Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<ContinuousUInt32Enum>();
        max.Should().NotBeNull();
        max.Should().Be(ContinuousUInt32Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<ContinuousUInt32Enum>().Should().Be(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<ContinuousUInt32Enum>().Should().Be(true);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<ContinuousUInt32Enum>().Should().Be(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<ContinuousUInt32Enum>(ContinuousUInt32Enum.A).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt32Enum>(ContinuousUInt32Enum.B).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt32Enum>(ContinuousUInt32Enum.C).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt32Enum>((ContinuousUInt32Enum)123).Should().BeFalse();

        //--- Extension methods
        ContinuousUInt32Enum.A.IsDefined().Should().BeTrue();
        ContinuousUInt32Enum.B.IsDefined().Should().BeTrue();
        ContinuousUInt32Enum.C.IsDefined().Should().BeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<ContinuousUInt32Enum>(nameof(ContinuousUInt32Enum.A)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt32Enum>(nameof(ContinuousUInt32Enum.B)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt32Enum>(nameof(ContinuousUInt32Enum.C)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt32Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<ContinuousUInt32Enum>("value").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt32Enum.A, name: nameof(ContinuousUInt32Enum.A), valueString: ((uint)ContinuousUInt32Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt32Enum.B, name: nameof(ContinuousUInt32Enum.B), valueString: ((uint)ContinuousUInt32Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt32Enum.C, name: nameof(ContinuousUInt32Enum.C), valueString: ((uint)ContinuousUInt32Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousUInt32Enum>(x.name).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<ContinuousUInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture))).Should().Throw<ArgumentException>();
            FastEnum.Parse<ContinuousUInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt32Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt32Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt32Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt32Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt32Enum>("")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt32Enum>(" ")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt32Enum>("ABCDE")).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousUInt32Enum>("123").Should().Be((ContinuousUInt32Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt32Enum.A, name: nameof(ContinuousUInt32Enum.A), valueString: ((uint)ContinuousUInt32Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt32Enum.B, name: nameof(ContinuousUInt32Enum.B), valueString: ((uint)ContinuousUInt32Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt32Enum.C, name: nameof(ContinuousUInt32Enum.C), valueString: ((uint)ContinuousUInt32Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousUInt32Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt32Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt32Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt32Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt32Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt32Enum>("", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt32Enum>(" ", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt32Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousUInt32Enum>("123").Should().Be((ContinuousUInt32Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt32Enum.A, name: nameof(ContinuousUInt32Enum.A), valueString: ((uint)ContinuousUInt32Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt32Enum.B, name: nameof(ContinuousUInt32Enum.B), valueString: ((uint)ContinuousUInt32Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt32Enum.C, name: nameof(ContinuousUInt32Enum.C), valueString: ((uint)ContinuousUInt32Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousUInt32Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), out var _).Should().BeFalse();
            FastEnum.TryParse<ContinuousUInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), out var _).Should().BeTrue();

            FastEnum.TryParse<ContinuousUInt32Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt32Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt32Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousUInt32Enum>((string?)null, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt32Enum>("", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt32Enum>(" ", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt32Enum>("ABCDE", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt32Enum>("123", out var r).Should().BeTrue();
        r.Should().Be((ContinuousUInt32Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt32Enum.A, name: nameof(ContinuousUInt32Enum.A), valueString: ((uint)ContinuousUInt32Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt32Enum.B, name: nameof(ContinuousUInt32Enum.B), valueString: ((uint)ContinuousUInt32Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt32Enum.C, name: nameof(ContinuousUInt32Enum.C), valueString: ((uint)ContinuousUInt32Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousUInt32Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt32Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt32Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt32Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousUInt32Enum>((string?)null, true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt32Enum>("", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt32Enum>(" ", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt32Enum>("ABCDE", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt32Enum>("123", true, out var r).Should().BeTrue();
        r.Should().Be((ContinuousUInt32Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = ContinuousUInt32Enum.A;
        var name = nameof(ContinuousUInt32Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(ContinuousUInt32Enum).GetField(name);

        member.Should().NotBeNull();
        member.Name.Should().Be(name);
        member.NameUtf8.Should().Equal(nameUtf8);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [TestMethod]
    public void ToName()
    {
        ContinuousUInt32Enum.A.ToName().Should().Be(nameof(ContinuousUInt32Enum.A));
        ContinuousUInt32Enum.B.ToName().Should().Be(nameof(ContinuousUInt32Enum.B));
        ContinuousUInt32Enum.C.ToName().Should().Be(nameof(ContinuousUInt32Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = ContinuousUInt32Enum.A;
        const uint value = 1;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        @enum.ToUInt32().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }


    [TestMethod]
    public void FastToString()
    {
        const ContinuousUInt32Enum undefined = (ContinuousUInt32Enum)123;
        var values = Enum.GetValues<ContinuousUInt32Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class ContinuousInt64Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<ContinuousInt64Enum>().Should().Be<long>();


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<ContinuousInt64Enum>();
        var actual = FastEnum.GetValues<ContinuousInt64Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<ContinuousInt64Enum>();
        var actual = FastEnum.GetNames<ContinuousInt64Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        {
            const ContinuousInt64Enum defined = ContinuousInt64Enum.A;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const ContinuousInt64Enum undefined = (ContinuousInt64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<ContinuousInt64Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<ContinuousInt64Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(ContinuousInt64Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<ContinuousInt64Enum>();

        actual.Length.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.NameUtf8.Should().Equal(e.nameUtf8);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        {
            const ContinuousInt64Enum defined = ContinuousInt64Enum.A;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.NameUtf8.Should().Equal(expect.nameUtf8);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const ContinuousInt64Enum undefined = (ContinuousInt64Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<ContinuousInt64Enum>();
        min.Should().NotBeNull();
        min.Should().Be(ContinuousInt64Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<ContinuousInt64Enum>();
        max.Should().NotBeNull();
        max.Should().Be(ContinuousInt64Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<ContinuousInt64Enum>().Should().Be(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<ContinuousInt64Enum>().Should().Be(true);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<ContinuousInt64Enum>().Should().Be(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<ContinuousInt64Enum>(ContinuousInt64Enum.A).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt64Enum>(ContinuousInt64Enum.B).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt64Enum>(ContinuousInt64Enum.C).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt64Enum>((ContinuousInt64Enum)123).Should().BeFalse();

        //--- Extension methods
        ContinuousInt64Enum.A.IsDefined().Should().BeTrue();
        ContinuousInt64Enum.B.IsDefined().Should().BeTrue();
        ContinuousInt64Enum.C.IsDefined().Should().BeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<ContinuousInt64Enum>(nameof(ContinuousInt64Enum.A)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt64Enum>(nameof(ContinuousInt64Enum.B)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt64Enum>(nameof(ContinuousInt64Enum.C)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousInt64Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<ContinuousInt64Enum>("value").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: ContinuousInt64Enum.A, name: nameof(ContinuousInt64Enum.A), valueString: ((long)ContinuousInt64Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt64Enum.B, name: nameof(ContinuousInt64Enum.B), valueString: ((long)ContinuousInt64Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt64Enum.C, name: nameof(ContinuousInt64Enum.C), valueString: ((long)ContinuousInt64Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousInt64Enum>(x.name).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<ContinuousInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture))).Should().Throw<ArgumentException>();
            FastEnum.Parse<ContinuousInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt64Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt64Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt64Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt64Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt64Enum>("")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt64Enum>(" ")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt64Enum>("ABCDE")).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousInt64Enum>("123").Should().Be((ContinuousInt64Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousInt64Enum.A, name: nameof(ContinuousInt64Enum.A), valueString: ((long)ContinuousInt64Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt64Enum.B, name: nameof(ContinuousInt64Enum.B), valueString: ((long)ContinuousInt64Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt64Enum.C, name: nameof(ContinuousInt64Enum.C), valueString: ((long)ContinuousInt64Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousInt64Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt64Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt64Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousInt64Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt64Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt64Enum>("", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt64Enum>(" ", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousInt64Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousInt64Enum>("123").Should().Be((ContinuousInt64Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: ContinuousInt64Enum.A, name: nameof(ContinuousInt64Enum.A), valueString: ((long)ContinuousInt64Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt64Enum.B, name: nameof(ContinuousInt64Enum.B), valueString: ((long)ContinuousInt64Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt64Enum.C, name: nameof(ContinuousInt64Enum.C), valueString: ((long)ContinuousInt64Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousInt64Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), out var _).Should().BeFalse();
            FastEnum.TryParse<ContinuousInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), out var _).Should().BeTrue();

            FastEnum.TryParse<ContinuousInt64Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt64Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt64Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousInt64Enum>((string?)null, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt64Enum>("", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt64Enum>(" ", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt64Enum>("ABCDE", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt64Enum>("123", out var r).Should().BeTrue();
        r.Should().Be((ContinuousInt64Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousInt64Enum.A, name: nameof(ContinuousInt64Enum.A), valueString: ((long)ContinuousInt64Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt64Enum.B, name: nameof(ContinuousInt64Enum.B), valueString: ((long)ContinuousInt64Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousInt64Enum.C, name: nameof(ContinuousInt64Enum.C), valueString: ((long)ContinuousInt64Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousInt64Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt64Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt64Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<ContinuousInt64Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousInt64Enum>((string?)null, true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt64Enum>("", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt64Enum>(" ", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt64Enum>("ABCDE", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousInt64Enum>("123", true, out var r).Should().BeTrue();
        r.Should().Be((ContinuousInt64Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = ContinuousInt64Enum.A;
        var name = nameof(ContinuousInt64Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(ContinuousInt64Enum).GetField(name);

        member.Should().NotBeNull();
        member.Name.Should().Be(name);
        member.NameUtf8.Should().Equal(nameUtf8);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [TestMethod]
    public void ToName()
    {
        ContinuousInt64Enum.A.ToName().Should().Be(nameof(ContinuousInt64Enum.A));
        ContinuousInt64Enum.B.ToName().Should().Be(nameof(ContinuousInt64Enum.B));
        ContinuousInt64Enum.C.ToName().Should().Be(nameof(ContinuousInt64Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = ContinuousInt64Enum.A;
        const long value = 1;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        @enum.ToInt64().Should().Be(value);
        FluentActions.Invoking(() => @enum.ToUInt64()).Should().Throw<ArgumentException>();
    }


    [TestMethod]
    public void FastToString()
    {
        const ContinuousInt64Enum undefined = (ContinuousInt64Enum)123;
        var values = Enum.GetValues<ContinuousInt64Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class ContinuousUInt64Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<ContinuousUInt64Enum>().Should().Be<ulong>();


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<ContinuousUInt64Enum>();
        var actual = FastEnum.GetValues<ContinuousUInt64Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<ContinuousUInt64Enum>();
        var actual = FastEnum.GetNames<ContinuousUInt64Enum>();
        actual.Should().BeEquivalentTo(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        {
            const ContinuousUInt64Enum defined = ContinuousUInt64Enum.A;
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.Should().NotBeNull();
            actual.Should().BeEquivalentTo(expect);
        }
        //--- undefined value
        {
            const ContinuousUInt64Enum undefined = (ContinuousUInt64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.Should().BeNull();
            actual.Should().BeEquivalentTo(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<ContinuousUInt64Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<ContinuousUInt64Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(ContinuousUInt64Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<ContinuousUInt64Enum>();

        actual.Length.Should().Be(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.Should().Be(e.value);
            a.Name.Should().Be(e.name);
            a.NameUtf8.Should().Equal(e.nameUtf8);
            a.FieldInfo.Should().Be(e.fieldInfo);

            var (name, value) = a;
            value.Should().Be(e.value);
            name.Should().Be(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        {
            const ContinuousUInt64Enum defined = ContinuousUInt64Enum.A;
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.Should().NotBeNull();
            actual.Value.Should().Be(expect.value);
            actual.Name.Should().Be(expect.name);
            actual.NameUtf8.Should().Equal(expect.nameUtf8);
            actual.FieldInfo.Should().Be(expect.fieldInfo);

            var (name, value) = actual;
            value.Should().Be(expect.value);
            name.Should().Be(expect.name);
        }
        //--- undefined value
        {
            const ContinuousUInt64Enum undefined = (ContinuousUInt64Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.Should().BeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<ContinuousUInt64Enum>();
        min.Should().NotBeNull();
        min.Should().Be(ContinuousUInt64Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<ContinuousUInt64Enum>();
        max.Should().NotBeNull();
        max.Should().Be(ContinuousUInt64Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<ContinuousUInt64Enum>().Should().Be(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<ContinuousUInt64Enum>().Should().Be(true);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<ContinuousUInt64Enum>().Should().Be(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<ContinuousUInt64Enum>(ContinuousUInt64Enum.A).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt64Enum>(ContinuousUInt64Enum.B).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt64Enum>(ContinuousUInt64Enum.C).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt64Enum>((ContinuousUInt64Enum)123).Should().BeFalse();

        //--- Extension methods
        ContinuousUInt64Enum.A.IsDefined().Should().BeTrue();
        ContinuousUInt64Enum.B.IsDefined().Should().BeTrue();
        ContinuousUInt64Enum.C.IsDefined().Should().BeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<ContinuousUInt64Enum>(nameof(ContinuousUInt64Enum.A)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt64Enum>(nameof(ContinuousUInt64Enum.B)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt64Enum>(nameof(ContinuousUInt64Enum.C)).Should().BeTrue();
        FastEnum.IsDefined<ContinuousUInt64Enum>("123").Should().BeFalse();
        FastEnum.IsDefined<ContinuousUInt64Enum>("value").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt64Enum.A, name: nameof(ContinuousUInt64Enum.A), valueString: ((ulong)ContinuousUInt64Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt64Enum.B, name: nameof(ContinuousUInt64Enum.B), valueString: ((ulong)ContinuousUInt64Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt64Enum.C, name: nameof(ContinuousUInt64Enum.C), valueString: ((ulong)ContinuousUInt64Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousUInt64Enum>(x.name).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<ContinuousUInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture))).Should().Throw<ArgumentException>();
            FastEnum.Parse<ContinuousUInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt64Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt64Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt64Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt64Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt64Enum>("")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt64Enum>(" ")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt64Enum>("ABCDE")).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousUInt64Enum>("123").Should().Be((ContinuousUInt64Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt64Enum.A, name: nameof(ContinuousUInt64Enum.A), valueString: ((ulong)ContinuousUInt64Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt64Enum.B, name: nameof(ContinuousUInt64Enum.B), valueString: ((ulong)ContinuousUInt64Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt64Enum.C, name: nameof(ContinuousUInt64Enum.C), valueString: ((ulong)ContinuousUInt64Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ContinuousUInt64Enum>(x.name, true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt64Enum>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt64Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<ContinuousUInt64Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt64Enum>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt64Enum>("", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt64Enum>(" ", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ContinuousUInt64Enum>("ABCDE", true)).Should().Throw<ArgumentException>();
        FastEnum.Parse<ContinuousUInt64Enum>("123").Should().Be((ContinuousUInt64Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt64Enum.A, name: nameof(ContinuousUInt64Enum.A), valueString: ((ulong)ContinuousUInt64Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt64Enum.B, name: nameof(ContinuousUInt64Enum.B), valueString: ((ulong)ContinuousUInt64Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt64Enum.C, name: nameof(ContinuousUInt64Enum.C), valueString: ((ulong)ContinuousUInt64Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousUInt64Enum>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), out var _).Should().BeFalse();
            FastEnum.TryParse<ContinuousUInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), out var _).Should().BeTrue();

            FastEnum.TryParse<ContinuousUInt64Enum>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt64Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt64Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousUInt64Enum>((string?)null, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt64Enum>("", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt64Enum>(" ", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt64Enum>("ABCDE", out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt64Enum>("123", out var r).Should().BeTrue();
        r.Should().Be((ContinuousUInt64Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: ContinuousUInt64Enum.A, name: nameof(ContinuousUInt64Enum.A), valueString: ((ulong)ContinuousUInt64Enum.A).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt64Enum.B, name: nameof(ContinuousUInt64Enum.B), valueString: ((ulong)ContinuousUInt64Enum.B).ToString(CultureInfo.InvariantCulture)),
            (value: ContinuousUInt64Enum.C, name: nameof(ContinuousUInt64Enum.C), valueString: ((ulong)ContinuousUInt64Enum.C).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ContinuousUInt64Enum>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt64Enum>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt64Enum>(x.valueString.ToLower(CultureInfo.InvariantCulture), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<ContinuousUInt64Enum>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<ContinuousUInt64Enum>((string?)null, true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt64Enum>("", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt64Enum>(" ", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt64Enum>("ABCDE", true, out var _).Should().BeFalse();
        FastEnum.TryParse<ContinuousUInt64Enum>("123", true, out var r).Should().BeTrue();
        r.Should().Be((ContinuousUInt64Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = ContinuousUInt64Enum.A;
        var name = nameof(ContinuousUInt64Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(ContinuousUInt64Enum).GetField(name);

        member.Should().NotBeNull();
        member.Name.Should().Be(name);
        member.NameUtf8.Should().Equal(nameUtf8);
        member.Value.Should().Be(value);
        member.FieldInfo.Should().Be(info);
    }


    [TestMethod]
    public void ToName()
    {
        ContinuousUInt64Enum.A.ToName().Should().Be(nameof(ContinuousUInt64Enum.A));
        ContinuousUInt64Enum.B.ToName().Should().Be(nameof(ContinuousUInt64Enum.B));
        ContinuousUInt64Enum.C.ToName().Should().Be(nameof(ContinuousUInt64Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = ContinuousUInt64Enum.A;
        const ulong value = 1;

        FluentActions.Invoking(() => @enum.ToSByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToByte()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt16()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToUInt32()).Should().Throw<ArgumentException>();
        FluentActions.Invoking(() => @enum.ToInt64()).Should().Throw<ArgumentException>();
        @enum.ToUInt64().Should().Be(value);
    }


    [TestMethod]
    public void FastToString()
    {
        const ContinuousUInt64Enum undefined = (ContinuousUInt64Enum)123;
        var values = Enum.GetValues<ContinuousUInt64Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.Should().Be(expect);
        }
    }
}



