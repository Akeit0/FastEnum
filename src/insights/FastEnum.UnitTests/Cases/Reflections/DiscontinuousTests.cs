// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
#nullable enable

using System;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text;
using FastEnumUtility.UnitTests.Models;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Shouldly;

namespace FastEnumUtility.UnitTests.Cases.Reflections;



[TestClass]
public sealed class DiscontinuousSByteTests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<DiscontinuousSByteEnum>().ShouldBe(typeof(sbyte));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<DiscontinuousSByteEnum>();
        var actual = FastEnum.GetValues<DiscontinuousSByteEnum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<DiscontinuousSByteEnum>();
        var actual = FastEnum.GetNames<DiscontinuousSByteEnum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousSByteEnum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const DiscontinuousSByteEnum undefined = (DiscontinuousSByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<DiscontinuousSByteEnum>()
            .Select(static name =>
            {
                var value = Enum.Parse<DiscontinuousSByteEnum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(DiscontinuousSByteEnum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<DiscontinuousSByteEnum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousSByteEnum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const DiscontinuousSByteEnum undefined = (DiscontinuousSByteEnum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<DiscontinuousSByteEnum>();
        min.ShouldNotBeNull();
        min.ShouldBe(DiscontinuousSByteEnum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<DiscontinuousSByteEnum>();
        max.ShouldNotBeNull();
        max.ShouldBe(DiscontinuousSByteEnum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<DiscontinuousSByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<DiscontinuousSByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<DiscontinuousSByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<DiscontinuousSByteEnum>(DiscontinuousSByteEnum.A).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousSByteEnum>(DiscontinuousSByteEnum.B).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousSByteEnum>(DiscontinuousSByteEnum.C).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousSByteEnum>((DiscontinuousSByteEnum)123).ShouldBeFalse();

        //--- Extension methods
        DiscontinuousSByteEnum.A.IsDefined().ShouldBeTrue();
        DiscontinuousSByteEnum.B.IsDefined().ShouldBeTrue();
        DiscontinuousSByteEnum.C.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<DiscontinuousSByteEnum>(nameof(DiscontinuousSByteEnum.A)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousSByteEnum>(nameof(DiscontinuousSByteEnum.B)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousSByteEnum>(nameof(DiscontinuousSByteEnum.C)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousSByteEnum>("123").ShouldBeFalse();
        FastEnum.IsDefined<DiscontinuousSByteEnum>("value").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousSByteEnum.A, name: nameof(DiscontinuousSByteEnum.A)),
            (value: DiscontinuousSByteEnum.B, name: nameof(DiscontinuousSByteEnum.B)),
            (value: DiscontinuousSByteEnum.C, name: nameof(DiscontinuousSByteEnum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousSByteEnum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<DiscontinuousSByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<DiscontinuousSByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousSByteEnum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousSByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousSByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousSByteEnum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousSByteEnum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousSByteEnum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousSByteEnum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousSByteEnum>("123", ignoreCase).ShouldBe((DiscontinuousSByteEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousSByteEnum.A, name: nameof(DiscontinuousSByteEnum.A)),
            (value: DiscontinuousSByteEnum.B, name: nameof(DiscontinuousSByteEnum.B)),
            (value: DiscontinuousSByteEnum.C, name: nameof(DiscontinuousSByteEnum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousSByteEnum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousSByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousSByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousSByteEnum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousSByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousSByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousSByteEnum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousSByteEnum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousSByteEnum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousSByteEnum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousSByteEnum>("123", ignoreCase).ShouldBe((DiscontinuousSByteEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousSByteEnum.A, name: nameof(DiscontinuousSByteEnum.A)),
            (value: DiscontinuousSByteEnum.B, name: nameof(DiscontinuousSByteEnum.B)),
            (value: DiscontinuousSByteEnum.C, name: nameof(DiscontinuousSByteEnum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousSByteEnum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousSByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<DiscontinuousSByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeTrue();

            FastEnum.TryParse<DiscontinuousSByteEnum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousSByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousSByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousSByteEnum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousSByteEnum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousSByteEnum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousSByteEnum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousSByteEnum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousSByteEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousSByteEnum.A, name: nameof(DiscontinuousSByteEnum.A)),
            (value: DiscontinuousSByteEnum.B, name: nameof(DiscontinuousSByteEnum.B)),
            (value: DiscontinuousSByteEnum.C, name: nameof(DiscontinuousSByteEnum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousSByteEnum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousSByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousSByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousSByteEnum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousSByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousSByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousSByteEnum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousSByteEnum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousSByteEnum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousSByteEnum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousSByteEnum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousSByteEnum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = DiscontinuousSByteEnum.A;
        var name = nameof(DiscontinuousSByteEnum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(DiscontinuousSByteEnum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        DiscontinuousSByteEnum.A.ToName().ShouldBe(nameof(DiscontinuousSByteEnum.A));
        DiscontinuousSByteEnum.B.ToName().ShouldBe(nameof(DiscontinuousSByteEnum.B));
        DiscontinuousSByteEnum.C.ToName().ShouldBe(nameof(DiscontinuousSByteEnum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = DiscontinuousSByteEnum.A;
        const sbyte value = 1;

        @enum.ToSByte().ShouldBe(value);
        Should.Throw<ArgumentException>(() => @enum.ToByte());
        Should.Throw<ArgumentException>(() => @enum.ToInt16());
        Should.Throw<ArgumentException>(() => @enum.ToUInt16());
        Should.Throw<ArgumentException>(() => @enum.ToInt32());
        Should.Throw<ArgumentException>(() => @enum.ToUInt32());
        Should.Throw<ArgumentException>(() => @enum.ToInt64());
        Should.Throw<ArgumentException>(() => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const DiscontinuousSByteEnum undefined = (DiscontinuousSByteEnum)123;
        var values = Enum.GetValues<DiscontinuousSByteEnum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class DiscontinuousByteTests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<DiscontinuousByteEnum>().ShouldBe(typeof(byte));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<DiscontinuousByteEnum>();
        var actual = FastEnum.GetValues<DiscontinuousByteEnum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<DiscontinuousByteEnum>();
        var actual = FastEnum.GetNames<DiscontinuousByteEnum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousByteEnum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const DiscontinuousByteEnum undefined = (DiscontinuousByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<DiscontinuousByteEnum>()
            .Select(static name =>
            {
                var value = Enum.Parse<DiscontinuousByteEnum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(DiscontinuousByteEnum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<DiscontinuousByteEnum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousByteEnum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const DiscontinuousByteEnum undefined = (DiscontinuousByteEnum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<DiscontinuousByteEnum>();
        min.ShouldNotBeNull();
        min.ShouldBe(DiscontinuousByteEnum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<DiscontinuousByteEnum>();
        max.ShouldNotBeNull();
        max.ShouldBe(DiscontinuousByteEnum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<DiscontinuousByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<DiscontinuousByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<DiscontinuousByteEnum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<DiscontinuousByteEnum>(DiscontinuousByteEnum.A).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousByteEnum>(DiscontinuousByteEnum.B).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousByteEnum>(DiscontinuousByteEnum.C).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousByteEnum>((DiscontinuousByteEnum)123).ShouldBeFalse();

        //--- Extension methods
        DiscontinuousByteEnum.A.IsDefined().ShouldBeTrue();
        DiscontinuousByteEnum.B.IsDefined().ShouldBeTrue();
        DiscontinuousByteEnum.C.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<DiscontinuousByteEnum>(nameof(DiscontinuousByteEnum.A)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousByteEnum>(nameof(DiscontinuousByteEnum.B)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousByteEnum>(nameof(DiscontinuousByteEnum.C)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousByteEnum>("123").ShouldBeFalse();
        FastEnum.IsDefined<DiscontinuousByteEnum>("value").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousByteEnum.A, name: nameof(DiscontinuousByteEnum.A)),
            (value: DiscontinuousByteEnum.B, name: nameof(DiscontinuousByteEnum.B)),
            (value: DiscontinuousByteEnum.C, name: nameof(DiscontinuousByteEnum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousByteEnum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<DiscontinuousByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<DiscontinuousByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousByteEnum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousByteEnum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousByteEnum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousByteEnum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousByteEnum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousByteEnum>("123", ignoreCase).ShouldBe((DiscontinuousByteEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousByteEnum.A, name: nameof(DiscontinuousByteEnum.A)),
            (value: DiscontinuousByteEnum.B, name: nameof(DiscontinuousByteEnum.B)),
            (value: DiscontinuousByteEnum.C, name: nameof(DiscontinuousByteEnum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousByteEnum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousByteEnum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousByteEnum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousByteEnum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousByteEnum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousByteEnum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousByteEnum>("123", ignoreCase).ShouldBe((DiscontinuousByteEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousByteEnum.A, name: nameof(DiscontinuousByteEnum.A)),
            (value: DiscontinuousByteEnum.B, name: nameof(DiscontinuousByteEnum.B)),
            (value: DiscontinuousByteEnum.C, name: nameof(DiscontinuousByteEnum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousByteEnum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<DiscontinuousByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeTrue();

            FastEnum.TryParse<DiscontinuousByteEnum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousByteEnum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousByteEnum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousByteEnum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousByteEnum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousByteEnum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousByteEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousByteEnum.A, name: nameof(DiscontinuousByteEnum.A)),
            (value: DiscontinuousByteEnum.B, name: nameof(DiscontinuousByteEnum.B)),
            (value: DiscontinuousByteEnum.C, name: nameof(DiscontinuousByteEnum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousByteEnum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousByteEnum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousByteEnum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousByteEnum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousByteEnum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousByteEnum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousByteEnum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousByteEnum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousByteEnum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousByteEnum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousByteEnum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousByteEnum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = DiscontinuousByteEnum.A;
        var name = nameof(DiscontinuousByteEnum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(DiscontinuousByteEnum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        DiscontinuousByteEnum.A.ToName().ShouldBe(nameof(DiscontinuousByteEnum.A));
        DiscontinuousByteEnum.B.ToName().ShouldBe(nameof(DiscontinuousByteEnum.B));
        DiscontinuousByteEnum.C.ToName().ShouldBe(nameof(DiscontinuousByteEnum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = DiscontinuousByteEnum.A;
        const byte value = 1;

        Should.Throw<ArgumentException>(() => @enum.ToSByte());
        @enum.ToByte().ShouldBe(value);
        Should.Throw<ArgumentException>(() => @enum.ToInt16());
        Should.Throw<ArgumentException>(() => @enum.ToUInt16());
        Should.Throw<ArgumentException>(() => @enum.ToInt32());
        Should.Throw<ArgumentException>(() => @enum.ToUInt32());
        Should.Throw<ArgumentException>(() => @enum.ToInt64());
        Should.Throw<ArgumentException>(() => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const DiscontinuousByteEnum undefined = (DiscontinuousByteEnum)123;
        var values = Enum.GetValues<DiscontinuousByteEnum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class DiscontinuousInt16Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<DiscontinuousInt16Enum>().ShouldBe(typeof(short));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<DiscontinuousInt16Enum>();
        var actual = FastEnum.GetValues<DiscontinuousInt16Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<DiscontinuousInt16Enum>();
        var actual = FastEnum.GetNames<DiscontinuousInt16Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousInt16Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const DiscontinuousInt16Enum undefined = (DiscontinuousInt16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<DiscontinuousInt16Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<DiscontinuousInt16Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(DiscontinuousInt16Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<DiscontinuousInt16Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousInt16Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const DiscontinuousInt16Enum undefined = (DiscontinuousInt16Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<DiscontinuousInt16Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(DiscontinuousInt16Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<DiscontinuousInt16Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(DiscontinuousInt16Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<DiscontinuousInt16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<DiscontinuousInt16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<DiscontinuousInt16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<DiscontinuousInt16Enum>(DiscontinuousInt16Enum.A).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt16Enum>(DiscontinuousInt16Enum.B).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt16Enum>(DiscontinuousInt16Enum.C).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt16Enum>((DiscontinuousInt16Enum)123).ShouldBeFalse();

        //--- Extension methods
        DiscontinuousInt16Enum.A.IsDefined().ShouldBeTrue();
        DiscontinuousInt16Enum.B.IsDefined().ShouldBeTrue();
        DiscontinuousInt16Enum.C.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<DiscontinuousInt16Enum>(nameof(DiscontinuousInt16Enum.A)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt16Enum>(nameof(DiscontinuousInt16Enum.B)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt16Enum>(nameof(DiscontinuousInt16Enum.C)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt16Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<DiscontinuousInt16Enum>("value").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousInt16Enum.A, name: nameof(DiscontinuousInt16Enum.A)),
            (value: DiscontinuousInt16Enum.B, name: nameof(DiscontinuousInt16Enum.B)),
            (value: DiscontinuousInt16Enum.C, name: nameof(DiscontinuousInt16Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousInt16Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<DiscontinuousInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<DiscontinuousInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt16Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt16Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt16Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt16Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt16Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousInt16Enum>("123", ignoreCase).ShouldBe((DiscontinuousInt16Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousInt16Enum.A, name: nameof(DiscontinuousInt16Enum.A)),
            (value: DiscontinuousInt16Enum.B, name: nameof(DiscontinuousInt16Enum.B)),
            (value: DiscontinuousInt16Enum.C, name: nameof(DiscontinuousInt16Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousInt16Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt16Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt16Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt16Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt16Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt16Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousInt16Enum>("123", ignoreCase).ShouldBe((DiscontinuousInt16Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousInt16Enum.A, name: nameof(DiscontinuousInt16Enum.A)),
            (value: DiscontinuousInt16Enum.B, name: nameof(DiscontinuousInt16Enum.B)),
            (value: DiscontinuousInt16Enum.C, name: nameof(DiscontinuousInt16Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousInt16Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<DiscontinuousInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeTrue();

            FastEnum.TryParse<DiscontinuousInt16Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousInt16Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt16Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt16Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt16Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt16Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousInt16Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousInt16Enum.A, name: nameof(DiscontinuousInt16Enum.A)),
            (value: DiscontinuousInt16Enum.B, name: nameof(DiscontinuousInt16Enum.B)),
            (value: DiscontinuousInt16Enum.C, name: nameof(DiscontinuousInt16Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousInt16Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt16Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousInt16Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt16Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt16Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt16Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt16Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousInt16Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = DiscontinuousInt16Enum.A;
        var name = nameof(DiscontinuousInt16Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(DiscontinuousInt16Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        DiscontinuousInt16Enum.A.ToName().ShouldBe(nameof(DiscontinuousInt16Enum.A));
        DiscontinuousInt16Enum.B.ToName().ShouldBe(nameof(DiscontinuousInt16Enum.B));
        DiscontinuousInt16Enum.C.ToName().ShouldBe(nameof(DiscontinuousInt16Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = DiscontinuousInt16Enum.A;
        const short value = 1;

        Should.Throw<ArgumentException>(() => @enum.ToSByte());
        Should.Throw<ArgumentException>(() => @enum.ToByte());
        @enum.ToInt16().ShouldBe(value);
        Should.Throw<ArgumentException>(() => @enum.ToUInt16());
        Should.Throw<ArgumentException>(() => @enum.ToInt32());
        Should.Throw<ArgumentException>(() => @enum.ToUInt32());
        Should.Throw<ArgumentException>(() => @enum.ToInt64());
        Should.Throw<ArgumentException>(() => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const DiscontinuousInt16Enum undefined = (DiscontinuousInt16Enum)123;
        var values = Enum.GetValues<DiscontinuousInt16Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class DiscontinuousUInt16Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<DiscontinuousUInt16Enum>().ShouldBe(typeof(ushort));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<DiscontinuousUInt16Enum>();
        var actual = FastEnum.GetValues<DiscontinuousUInt16Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<DiscontinuousUInt16Enum>();
        var actual = FastEnum.GetNames<DiscontinuousUInt16Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousUInt16Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const DiscontinuousUInt16Enum undefined = (DiscontinuousUInt16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<DiscontinuousUInt16Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<DiscontinuousUInt16Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(DiscontinuousUInt16Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<DiscontinuousUInt16Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousUInt16Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const DiscontinuousUInt16Enum undefined = (DiscontinuousUInt16Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<DiscontinuousUInt16Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(DiscontinuousUInt16Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<DiscontinuousUInt16Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(DiscontinuousUInt16Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<DiscontinuousUInt16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<DiscontinuousUInt16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<DiscontinuousUInt16Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<DiscontinuousUInt16Enum>(DiscontinuousUInt16Enum.A).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt16Enum>(DiscontinuousUInt16Enum.B).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt16Enum>(DiscontinuousUInt16Enum.C).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt16Enum>((DiscontinuousUInt16Enum)123).ShouldBeFalse();

        //--- Extension methods
        DiscontinuousUInt16Enum.A.IsDefined().ShouldBeTrue();
        DiscontinuousUInt16Enum.B.IsDefined().ShouldBeTrue();
        DiscontinuousUInt16Enum.C.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<DiscontinuousUInt16Enum>(nameof(DiscontinuousUInt16Enum.A)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt16Enum>(nameof(DiscontinuousUInt16Enum.B)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt16Enum>(nameof(DiscontinuousUInt16Enum.C)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt16Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<DiscontinuousUInt16Enum>("value").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousUInt16Enum.A, name: nameof(DiscontinuousUInt16Enum.A)),
            (value: DiscontinuousUInt16Enum.B, name: nameof(DiscontinuousUInt16Enum.B)),
            (value: DiscontinuousUInt16Enum.C, name: nameof(DiscontinuousUInt16Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousUInt16Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<DiscontinuousUInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<DiscontinuousUInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt16Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt16Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt16Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt16Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt16Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousUInt16Enum>("123", ignoreCase).ShouldBe((DiscontinuousUInt16Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousUInt16Enum.A, name: nameof(DiscontinuousUInt16Enum.A)),
            (value: DiscontinuousUInt16Enum.B, name: nameof(DiscontinuousUInt16Enum.B)),
            (value: DiscontinuousUInt16Enum.C, name: nameof(DiscontinuousUInt16Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousUInt16Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt16Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt16Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt16Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt16Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt16Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousUInt16Enum>("123", ignoreCase).ShouldBe((DiscontinuousUInt16Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousUInt16Enum.A, name: nameof(DiscontinuousUInt16Enum.A)),
            (value: DiscontinuousUInt16Enum.B, name: nameof(DiscontinuousUInt16Enum.B)),
            (value: DiscontinuousUInt16Enum.C, name: nameof(DiscontinuousUInt16Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousUInt16Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<DiscontinuousUInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeTrue();

            FastEnum.TryParse<DiscontinuousUInt16Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousUInt16Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt16Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt16Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt16Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt16Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousUInt16Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousUInt16Enum.A, name: nameof(DiscontinuousUInt16Enum.A)),
            (value: DiscontinuousUInt16Enum.B, name: nameof(DiscontinuousUInt16Enum.B)),
            (value: DiscontinuousUInt16Enum.C, name: nameof(DiscontinuousUInt16Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousUInt16Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt16Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt16Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt16Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt16Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt16Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousUInt16Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt16Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt16Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt16Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt16Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousUInt16Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = DiscontinuousUInt16Enum.A;
        var name = nameof(DiscontinuousUInt16Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(DiscontinuousUInt16Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        DiscontinuousUInt16Enum.A.ToName().ShouldBe(nameof(DiscontinuousUInt16Enum.A));
        DiscontinuousUInt16Enum.B.ToName().ShouldBe(nameof(DiscontinuousUInt16Enum.B));
        DiscontinuousUInt16Enum.C.ToName().ShouldBe(nameof(DiscontinuousUInt16Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = DiscontinuousUInt16Enum.A;
        const ushort value = 1;

        Should.Throw<ArgumentException>(() => @enum.ToSByte());
        Should.Throw<ArgumentException>(() => @enum.ToByte());
        Should.Throw<ArgumentException>(() => @enum.ToInt16());
        @enum.ToUInt16().ShouldBe(value);
        Should.Throw<ArgumentException>(() => @enum.ToInt32());
        Should.Throw<ArgumentException>(() => @enum.ToUInt32());
        Should.Throw<ArgumentException>(() => @enum.ToInt64());
        Should.Throw<ArgumentException>(() => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const DiscontinuousUInt16Enum undefined = (DiscontinuousUInt16Enum)123;
        var values = Enum.GetValues<DiscontinuousUInt16Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class DiscontinuousInt32Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<DiscontinuousInt32Enum>().ShouldBe(typeof(int));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<DiscontinuousInt32Enum>();
        var actual = FastEnum.GetValues<DiscontinuousInt32Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<DiscontinuousInt32Enum>();
        var actual = FastEnum.GetNames<DiscontinuousInt32Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousInt32Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const DiscontinuousInt32Enum undefined = (DiscontinuousInt32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<DiscontinuousInt32Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<DiscontinuousInt32Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(DiscontinuousInt32Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<DiscontinuousInt32Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousInt32Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const DiscontinuousInt32Enum undefined = (DiscontinuousInt32Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<DiscontinuousInt32Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(DiscontinuousInt32Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<DiscontinuousInt32Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(DiscontinuousInt32Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<DiscontinuousInt32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<DiscontinuousInt32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<DiscontinuousInt32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<DiscontinuousInt32Enum>(DiscontinuousInt32Enum.A).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt32Enum>(DiscontinuousInt32Enum.B).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt32Enum>(DiscontinuousInt32Enum.C).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt32Enum>((DiscontinuousInt32Enum)123).ShouldBeFalse();

        //--- Extension methods
        DiscontinuousInt32Enum.A.IsDefined().ShouldBeTrue();
        DiscontinuousInt32Enum.B.IsDefined().ShouldBeTrue();
        DiscontinuousInt32Enum.C.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<DiscontinuousInt32Enum>(nameof(DiscontinuousInt32Enum.A)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt32Enum>(nameof(DiscontinuousInt32Enum.B)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt32Enum>(nameof(DiscontinuousInt32Enum.C)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt32Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<DiscontinuousInt32Enum>("value").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousInt32Enum.A, name: nameof(DiscontinuousInt32Enum.A)),
            (value: DiscontinuousInt32Enum.B, name: nameof(DiscontinuousInt32Enum.B)),
            (value: DiscontinuousInt32Enum.C, name: nameof(DiscontinuousInt32Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousInt32Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<DiscontinuousInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<DiscontinuousInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt32Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt32Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt32Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt32Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt32Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousInt32Enum>("123", ignoreCase).ShouldBe((DiscontinuousInt32Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousInt32Enum.A, name: nameof(DiscontinuousInt32Enum.A)),
            (value: DiscontinuousInt32Enum.B, name: nameof(DiscontinuousInt32Enum.B)),
            (value: DiscontinuousInt32Enum.C, name: nameof(DiscontinuousInt32Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousInt32Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt32Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt32Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt32Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt32Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt32Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousInt32Enum>("123", ignoreCase).ShouldBe((DiscontinuousInt32Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousInt32Enum.A, name: nameof(DiscontinuousInt32Enum.A)),
            (value: DiscontinuousInt32Enum.B, name: nameof(DiscontinuousInt32Enum.B)),
            (value: DiscontinuousInt32Enum.C, name: nameof(DiscontinuousInt32Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousInt32Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<DiscontinuousInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeTrue();

            FastEnum.TryParse<DiscontinuousInt32Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousInt32Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt32Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt32Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt32Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt32Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousInt32Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousInt32Enum.A, name: nameof(DiscontinuousInt32Enum.A)),
            (value: DiscontinuousInt32Enum.B, name: nameof(DiscontinuousInt32Enum.B)),
            (value: DiscontinuousInt32Enum.C, name: nameof(DiscontinuousInt32Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousInt32Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt32Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousInt32Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt32Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt32Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt32Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt32Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousInt32Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = DiscontinuousInt32Enum.A;
        var name = nameof(DiscontinuousInt32Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(DiscontinuousInt32Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        DiscontinuousInt32Enum.A.ToName().ShouldBe(nameof(DiscontinuousInt32Enum.A));
        DiscontinuousInt32Enum.B.ToName().ShouldBe(nameof(DiscontinuousInt32Enum.B));
        DiscontinuousInt32Enum.C.ToName().ShouldBe(nameof(DiscontinuousInt32Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = DiscontinuousInt32Enum.A;
        const int value = 1;

        Should.Throw<ArgumentException>(() => @enum.ToSByte());
        Should.Throw<ArgumentException>(() => @enum.ToByte());
        Should.Throw<ArgumentException>(() => @enum.ToInt16());
        Should.Throw<ArgumentException>(() => @enum.ToUInt16());
        @enum.ToInt32().ShouldBe(value);
        Should.Throw<ArgumentException>(() => @enum.ToUInt32());
        Should.Throw<ArgumentException>(() => @enum.ToInt64());
        Should.Throw<ArgumentException>(() => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const DiscontinuousInt32Enum undefined = (DiscontinuousInt32Enum)123;
        var values = Enum.GetValues<DiscontinuousInt32Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class DiscontinuousUInt32Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<DiscontinuousUInt32Enum>().ShouldBe(typeof(uint));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<DiscontinuousUInt32Enum>();
        var actual = FastEnum.GetValues<DiscontinuousUInt32Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<DiscontinuousUInt32Enum>();
        var actual = FastEnum.GetNames<DiscontinuousUInt32Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousUInt32Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const DiscontinuousUInt32Enum undefined = (DiscontinuousUInt32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<DiscontinuousUInt32Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<DiscontinuousUInt32Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(DiscontinuousUInt32Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<DiscontinuousUInt32Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousUInt32Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const DiscontinuousUInt32Enum undefined = (DiscontinuousUInt32Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<DiscontinuousUInt32Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(DiscontinuousUInt32Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<DiscontinuousUInt32Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(DiscontinuousUInt32Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<DiscontinuousUInt32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<DiscontinuousUInt32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<DiscontinuousUInt32Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<DiscontinuousUInt32Enum>(DiscontinuousUInt32Enum.A).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt32Enum>(DiscontinuousUInt32Enum.B).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt32Enum>(DiscontinuousUInt32Enum.C).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt32Enum>((DiscontinuousUInt32Enum)123).ShouldBeFalse();

        //--- Extension methods
        DiscontinuousUInt32Enum.A.IsDefined().ShouldBeTrue();
        DiscontinuousUInt32Enum.B.IsDefined().ShouldBeTrue();
        DiscontinuousUInt32Enum.C.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<DiscontinuousUInt32Enum>(nameof(DiscontinuousUInt32Enum.A)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt32Enum>(nameof(DiscontinuousUInt32Enum.B)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt32Enum>(nameof(DiscontinuousUInt32Enum.C)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt32Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<DiscontinuousUInt32Enum>("value").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousUInt32Enum.A, name: nameof(DiscontinuousUInt32Enum.A)),
            (value: DiscontinuousUInt32Enum.B, name: nameof(DiscontinuousUInt32Enum.B)),
            (value: DiscontinuousUInt32Enum.C, name: nameof(DiscontinuousUInt32Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousUInt32Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<DiscontinuousUInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<DiscontinuousUInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt32Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt32Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt32Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt32Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt32Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousUInt32Enum>("123", ignoreCase).ShouldBe((DiscontinuousUInt32Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousUInt32Enum.A, name: nameof(DiscontinuousUInt32Enum.A)),
            (value: DiscontinuousUInt32Enum.B, name: nameof(DiscontinuousUInt32Enum.B)),
            (value: DiscontinuousUInt32Enum.C, name: nameof(DiscontinuousUInt32Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousUInt32Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt32Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt32Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt32Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt32Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt32Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousUInt32Enum>("123", ignoreCase).ShouldBe((DiscontinuousUInt32Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousUInt32Enum.A, name: nameof(DiscontinuousUInt32Enum.A)),
            (value: DiscontinuousUInt32Enum.B, name: nameof(DiscontinuousUInt32Enum.B)),
            (value: DiscontinuousUInt32Enum.C, name: nameof(DiscontinuousUInt32Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousUInt32Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<DiscontinuousUInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeTrue();

            FastEnum.TryParse<DiscontinuousUInt32Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousUInt32Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt32Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt32Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt32Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt32Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousUInt32Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousUInt32Enum.A, name: nameof(DiscontinuousUInt32Enum.A)),
            (value: DiscontinuousUInt32Enum.B, name: nameof(DiscontinuousUInt32Enum.B)),
            (value: DiscontinuousUInt32Enum.C, name: nameof(DiscontinuousUInt32Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousUInt32Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt32Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt32Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt32Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt32Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt32Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousUInt32Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt32Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt32Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt32Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt32Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousUInt32Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = DiscontinuousUInt32Enum.A;
        var name = nameof(DiscontinuousUInt32Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(DiscontinuousUInt32Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        DiscontinuousUInt32Enum.A.ToName().ShouldBe(nameof(DiscontinuousUInt32Enum.A));
        DiscontinuousUInt32Enum.B.ToName().ShouldBe(nameof(DiscontinuousUInt32Enum.B));
        DiscontinuousUInt32Enum.C.ToName().ShouldBe(nameof(DiscontinuousUInt32Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = DiscontinuousUInt32Enum.A;
        const uint value = 1;

        Should.Throw<ArgumentException>(() => @enum.ToSByte());
        Should.Throw<ArgumentException>(() => @enum.ToByte());
        Should.Throw<ArgumentException>(() => @enum.ToInt16());
        Should.Throw<ArgumentException>(() => @enum.ToUInt16());
        Should.Throw<ArgumentException>(() => @enum.ToInt32());
        @enum.ToUInt32().ShouldBe(value);
        Should.Throw<ArgumentException>(() => @enum.ToInt64());
        Should.Throw<ArgumentException>(() => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const DiscontinuousUInt32Enum undefined = (DiscontinuousUInt32Enum)123;
        var values = Enum.GetValues<DiscontinuousUInt32Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class DiscontinuousInt64Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<DiscontinuousInt64Enum>().ShouldBe(typeof(long));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<DiscontinuousInt64Enum>();
        var actual = FastEnum.GetValues<DiscontinuousInt64Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<DiscontinuousInt64Enum>();
        var actual = FastEnum.GetNames<DiscontinuousInt64Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousInt64Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const DiscontinuousInt64Enum undefined = (DiscontinuousInt64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<DiscontinuousInt64Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<DiscontinuousInt64Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(DiscontinuousInt64Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<DiscontinuousInt64Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousInt64Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const DiscontinuousInt64Enum undefined = (DiscontinuousInt64Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<DiscontinuousInt64Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(DiscontinuousInt64Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<DiscontinuousInt64Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(DiscontinuousInt64Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<DiscontinuousInt64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<DiscontinuousInt64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<DiscontinuousInt64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<DiscontinuousInt64Enum>(DiscontinuousInt64Enum.A).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt64Enum>(DiscontinuousInt64Enum.B).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt64Enum>(DiscontinuousInt64Enum.C).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt64Enum>((DiscontinuousInt64Enum)123).ShouldBeFalse();

        //--- Extension methods
        DiscontinuousInt64Enum.A.IsDefined().ShouldBeTrue();
        DiscontinuousInt64Enum.B.IsDefined().ShouldBeTrue();
        DiscontinuousInt64Enum.C.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<DiscontinuousInt64Enum>(nameof(DiscontinuousInt64Enum.A)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt64Enum>(nameof(DiscontinuousInt64Enum.B)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt64Enum>(nameof(DiscontinuousInt64Enum.C)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousInt64Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<DiscontinuousInt64Enum>("value").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousInt64Enum.A, name: nameof(DiscontinuousInt64Enum.A)),
            (value: DiscontinuousInt64Enum.B, name: nameof(DiscontinuousInt64Enum.B)),
            (value: DiscontinuousInt64Enum.C, name: nameof(DiscontinuousInt64Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousInt64Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<DiscontinuousInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<DiscontinuousInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt64Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt64Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt64Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt64Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt64Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousInt64Enum>("123", ignoreCase).ShouldBe((DiscontinuousInt64Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousInt64Enum.A, name: nameof(DiscontinuousInt64Enum.A)),
            (value: DiscontinuousInt64Enum.B, name: nameof(DiscontinuousInt64Enum.B)),
            (value: DiscontinuousInt64Enum.C, name: nameof(DiscontinuousInt64Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousInt64Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt64Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt64Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt64Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt64Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousInt64Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousInt64Enum>("123", ignoreCase).ShouldBe((DiscontinuousInt64Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousInt64Enum.A, name: nameof(DiscontinuousInt64Enum.A)),
            (value: DiscontinuousInt64Enum.B, name: nameof(DiscontinuousInt64Enum.B)),
            (value: DiscontinuousInt64Enum.C, name: nameof(DiscontinuousInt64Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousInt64Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<DiscontinuousInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeTrue();

            FastEnum.TryParse<DiscontinuousInt64Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousInt64Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt64Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt64Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt64Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt64Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousInt64Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousInt64Enum.A, name: nameof(DiscontinuousInt64Enum.A)),
            (value: DiscontinuousInt64Enum.B, name: nameof(DiscontinuousInt64Enum.B)),
            (value: DiscontinuousInt64Enum.C, name: nameof(DiscontinuousInt64Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousInt64Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt64Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousInt64Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt64Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt64Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt64Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousInt64Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousInt64Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = DiscontinuousInt64Enum.A;
        var name = nameof(DiscontinuousInt64Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(DiscontinuousInt64Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        DiscontinuousInt64Enum.A.ToName().ShouldBe(nameof(DiscontinuousInt64Enum.A));
        DiscontinuousInt64Enum.B.ToName().ShouldBe(nameof(DiscontinuousInt64Enum.B));
        DiscontinuousInt64Enum.C.ToName().ShouldBe(nameof(DiscontinuousInt64Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = DiscontinuousInt64Enum.A;
        const long value = 1;

        Should.Throw<ArgumentException>(() => @enum.ToSByte());
        Should.Throw<ArgumentException>(() => @enum.ToByte());
        Should.Throw<ArgumentException>(() => @enum.ToInt16());
        Should.Throw<ArgumentException>(() => @enum.ToUInt16());
        Should.Throw<ArgumentException>(() => @enum.ToInt32());
        Should.Throw<ArgumentException>(() => @enum.ToUInt32());
        @enum.ToInt64().ShouldBe(value);
        Should.Throw<ArgumentException>(() => @enum.ToUInt64());
    }


    [TestMethod]
    public void FastToString()
    {
        const DiscontinuousInt64Enum undefined = (DiscontinuousInt64Enum)123;
        var values = Enum.GetValues<DiscontinuousInt64Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class DiscontinuousUInt64Tests
{
    [TestMethod]
    public void GetUnderlyingType()
        => FastEnum.GetUnderlyingType<DiscontinuousUInt64Enum>().ShouldBe(typeof(ulong));


    [TestMethod]
    public void GetValues()
    {
        var expect = Enum.GetValues<DiscontinuousUInt64Enum>();
        var actual = FastEnum.GetValues<DiscontinuousUInt64Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetNames()
    {
        var expect = Enum.GetNames<DiscontinuousUInt64Enum>();
        var actual = FastEnum.GetNames<DiscontinuousUInt64Enum>();
        actual.ShouldBe(expect);
    }


    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousUInt64Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const DiscontinuousUInt64Enum undefined = (DiscontinuousUInt64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void GetMembers()
    {
        var expect
            = Enum.GetNames<DiscontinuousUInt64Enum>()
            .Select(static name =>
            {
                var value = Enum.Parse<DiscontinuousUInt64Enum>(name);
                var nameUtf8 = Encoding.UTF8.GetBytes(name);
                var fieldInfo = typeof(DiscontinuousUInt64Enum).GetField(name);
                return (value, name, nameUtf8, fieldInfo);
            })
            .ToArray();
        var actual = FastEnum.GetMembers<DiscontinuousUInt64Enum>();

        actual.Length.ShouldBe(expect.Length);
        for (var i = 0; i < expect.Length; i++)
        {
            var a = actual[i];
            var e = expect[i];
            a.Value.ShouldBe(e.value);
            a.Name.ShouldBe(e.name);
            a.NameUtf8.ShouldBe(e.nameUtf8);
            a.FieldInfo.ShouldBe(e.fieldInfo);

            var (name, value) = a;
            value.ShouldBe(e.value);
            name.ShouldBe(e.name);
        }
    }


    [TestMethod]
    public void GetMember()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<DiscontinuousUInt64Enum>())
        {
            var expect = getMember(defined);
            var actual = FastEnum.GetMember(defined)!;

            actual.ShouldNotBeNull();
            actual.Value.ShouldBe(expect.value);
            actual.Name.ShouldBe(expect.name);
            actual.NameUtf8.ShouldBe(expect.nameUtf8);
            actual.FieldInfo.ShouldBe(expect.fieldInfo);

            var (name, value) = actual;
            value.ShouldBe(expect.value);
            name.ShouldBe(expect.name);
        }
        //--- undefined value
        {
            const DiscontinuousUInt64Enum undefined = (DiscontinuousUInt64Enum)123;
            var actual = FastEnum.GetMember(undefined);
            actual.ShouldBeNull();
        }

        #region Local Functions
        static (T value, string name, byte[] nameUtf8, FieldInfo fieldInfo) getMember<T>(T value)
            where T : struct, Enum
        {
            var name = Enum.GetName<T>(value)!;
            var nameUtf8 = Encoding.UTF8.GetBytes(name);
            var fieldInfo = typeof(T).GetField(name)!;
            return (value, name, nameUtf8, fieldInfo);
        }
        #endregion
    }


    [TestMethod]
    public void GetMinValue()
    {
        var min = FastEnum.GetMinValue<DiscontinuousUInt64Enum>();
        min.ShouldNotBeNull();
        min.ShouldBe(DiscontinuousUInt64Enum.A);
    }


    [TestMethod]
    public void GetMaxValue()
    {
        var max = FastEnum.GetMaxValue<DiscontinuousUInt64Enum>();
        max.ShouldNotBeNull();
        max.ShouldBe(DiscontinuousUInt64Enum.C);
    }


    [TestMethod]
    public void IsEmpty()
        => FastEnum.IsEmpty<DiscontinuousUInt64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsContinuous()
        => FastEnum.IsContinuous<DiscontinuousUInt64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsFlags()
        => FastEnum.IsFlags<DiscontinuousUInt64Enum>().ShouldBe(false);


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<DiscontinuousUInt64Enum>(DiscontinuousUInt64Enum.A).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt64Enum>(DiscontinuousUInt64Enum.B).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt64Enum>(DiscontinuousUInt64Enum.C).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt64Enum>((DiscontinuousUInt64Enum)123).ShouldBeFalse();

        //--- Extension methods
        DiscontinuousUInt64Enum.A.IsDefined().ShouldBeTrue();
        DiscontinuousUInt64Enum.B.IsDefined().ShouldBeTrue();
        DiscontinuousUInt64Enum.C.IsDefined().ShouldBeTrue();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<DiscontinuousUInt64Enum>(nameof(DiscontinuousUInt64Enum.A)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt64Enum>(nameof(DiscontinuousUInt64Enum.B)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt64Enum>(nameof(DiscontinuousUInt64Enum.C)).ShouldBeTrue();
        FastEnum.IsDefined<DiscontinuousUInt64Enum>("123").ShouldBeFalse();
        FastEnum.IsDefined<DiscontinuousUInt64Enum>("value").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousUInt64Enum.A, name: nameof(DiscontinuousUInt64Enum.A)),
            (value: DiscontinuousUInt64Enum.B, name: nameof(DiscontinuousUInt64Enum.B)),
            (value: DiscontinuousUInt64Enum.C, name: nameof(DiscontinuousUInt64Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousUInt64Enum>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<DiscontinuousUInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<DiscontinuousUInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt64Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt64Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt64Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt64Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt64Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousUInt64Enum>("123", ignoreCase).ShouldBe((DiscontinuousUInt64Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousUInt64Enum.A, name: nameof(DiscontinuousUInt64Enum.A)),
            (value: DiscontinuousUInt64Enum.B, name: nameof(DiscontinuousUInt64Enum.B)),
            (value: DiscontinuousUInt64Enum.C, name: nameof(DiscontinuousUInt64Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<DiscontinuousUInt64Enum>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt64Enum>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<DiscontinuousUInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt64Enum>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt64Enum>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt64Enum>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<DiscontinuousUInt64Enum>("ABCDE", ignoreCase));
        FastEnum.Parse<DiscontinuousUInt64Enum>("123", ignoreCase).ShouldBe((DiscontinuousUInt64Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: DiscontinuousUInt64Enum.A, name: nameof(DiscontinuousUInt64Enum.A)),
            (value: DiscontinuousUInt64Enum.B, name: nameof(DiscontinuousUInt64Enum.B)),
            (value: DiscontinuousUInt64Enum.C, name: nameof(DiscontinuousUInt64Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousUInt64Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<DiscontinuousUInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeTrue();

            FastEnum.TryParse<DiscontinuousUInt64Enum>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousUInt64Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt64Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt64Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt64Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt64Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousUInt64Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: DiscontinuousUInt64Enum.A, name: nameof(DiscontinuousUInt64Enum.A)),
            (value: DiscontinuousUInt64Enum.B, name: nameof(DiscontinuousUInt64Enum.B)),
            (value: DiscontinuousUInt64Enum.C, name: nameof(DiscontinuousUInt64Enum.C)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<DiscontinuousUInt64Enum>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt64Enum>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt64Enum>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt64Enum>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt64Enum>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<DiscontinuousUInt64Enum>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<DiscontinuousUInt64Enum>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt64Enum>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt64Enum>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt64Enum>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<DiscontinuousUInt64Enum>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((DiscontinuousUInt64Enum)123);
    }


    [TestMethod]
    public void ToMember()
    {
        var value = DiscontinuousUInt64Enum.A;
        var name = nameof(DiscontinuousUInt64Enum.A);
        var nameUtf8 = Encoding.UTF8.GetBytes(name);
        var member = value.ToMember()!;
        var info = typeof(DiscontinuousUInt64Enum).GetField(name);

        member.ShouldNotBeNull();
        member.Name.ShouldBe(name);
        member.NameUtf8.ShouldBe(nameUtf8);
        member.Value.ShouldBe(value);
        member.FieldInfo.ShouldBe(info);
    }


    [TestMethod]
    public void ToName()
    {
        DiscontinuousUInt64Enum.A.ToName().ShouldBe(nameof(DiscontinuousUInt64Enum.A));
        DiscontinuousUInt64Enum.B.ToName().ShouldBe(nameof(DiscontinuousUInt64Enum.B));
        DiscontinuousUInt64Enum.C.ToName().ShouldBe(nameof(DiscontinuousUInt64Enum.C));
    }


    [TestMethod]
    public void ToUnderlying()
    {
        var @enum = DiscontinuousUInt64Enum.A;
        const ulong value = 1;

        Should.Throw<ArgumentException>(() => @enum.ToSByte());
        Should.Throw<ArgumentException>(() => @enum.ToByte());
        Should.Throw<ArgumentException>(() => @enum.ToInt16());
        Should.Throw<ArgumentException>(() => @enum.ToUInt16());
        Should.Throw<ArgumentException>(() => @enum.ToInt32());
        Should.Throw<ArgumentException>(() => @enum.ToUInt32());
        Should.Throw<ArgumentException>(() => @enum.ToInt64());
        @enum.ToUInt64().ShouldBe(value);
    }


    [TestMethod]
    public void FastToString()
    {
        const DiscontinuousUInt64Enum undefined = (DiscontinuousUInt64Enum)123;
        var values = Enum.GetValues<DiscontinuousUInt64Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = x.FastToString();
            actual.ShouldBe(expect);
        }
    }
}



