// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
#nullable enable

using System;
using System.Globalization;
using System.Linq;
using System.Text;
using FastEnumUtility.UnitTests.Models;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace FastEnumUtility.UnitTests.Cases.Generators;



[TestClass]
public sealed class BasicSByteTests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<SByteEnum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<SByteEnum, SByteEnumBooster>(defined);
            actual.Should().NotBeNull();
            actual.Should().Be(expect);
        }
        //--- undefined value
        {
            const SByteEnum undefined = (SByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<SByteEnum, SByteEnumBooster>(undefined);
            actual.Should().BeNull();
            actual.Should().Be(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(SByteEnum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(SByteEnum.Zero).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(SByteEnum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>((SByteEnum)123).Should().BeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(nameof(SByteEnum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(nameof(SByteEnum.Zero)).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(nameof(SByteEnum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>("123").Should().BeFalse();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>("minvalue").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue), valueString: ((sbyte)SByteEnum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero),     valueString: ((sbyte)SByteEnum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue), valueString: ((sbyte)SByteEnum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<SByteEnum, SByteEnumBooster>("123", ignoreCase).Should().Be((SByteEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue), valueString: ((sbyte)SByteEnum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero),     valueString: ((sbyte)SByteEnum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue), valueString: ((sbyte)SByteEnum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<SByteEnum, SByteEnumBooster>("123", ignoreCase).Should().Be((SByteEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue), valueString: ((sbyte)SByteEnum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero),     valueString: ((sbyte)SByteEnum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue), valueString: ((sbyte)SByteEnum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();
            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.valueString, ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((SByteEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue), valueString: ((sbyte)SByteEnum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero),     valueString: ((sbyte)SByteEnum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue), valueString: ((sbyte)SByteEnum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.valueString, ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((SByteEnum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const SByteEnum undefined = (SByteEnum)123;
        var values = Enum.GetValues<SByteEnum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<SByteEnum, SByteEnumBooster>(x);
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class BasicByteTests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<ByteEnum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<ByteEnum, ByteEnumBooster>(defined);
            actual.Should().NotBeNull();
            actual.Should().Be(expect);
        }
        //--- undefined value
        {
            const ByteEnum undefined = (ByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<ByteEnum, ByteEnumBooster>(undefined);
            actual.Should().BeNull();
            actual.Should().Be(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>(ByteEnum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>(ByteEnum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>((ByteEnum)123).Should().BeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>(nameof(ByteEnum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>(nameof(ByteEnum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>("123").Should().BeFalse();
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>("minvalue").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue), valueString: ((byte)ByteEnum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue), valueString: ((byte)ByteEnum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<ByteEnum, ByteEnumBooster>("123", ignoreCase).Should().Be((ByteEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue), valueString: ((byte)ByteEnum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue), valueString: ((byte)ByteEnum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<ByteEnum, ByteEnumBooster>("123", ignoreCase).Should().Be((ByteEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue), valueString: ((byte)ByteEnum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue), valueString: ((byte)ByteEnum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();
            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.valueString, ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((ByteEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue), valueString: ((byte)ByteEnum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue), valueString: ((byte)ByteEnum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.valueString, ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((ByteEnum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const ByteEnum undefined = (ByteEnum)123;
        var values = Enum.GetValues<ByteEnum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<ByteEnum, ByteEnumBooster>(x);
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class BasicInt16Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int16Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<Int16Enum, Int16EnumBooster>(defined);
            actual.Should().NotBeNull();
            actual.Should().Be(expect);
        }
        //--- undefined value
        {
            const Int16Enum undefined = (Int16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<Int16Enum, Int16EnumBooster>(undefined);
            actual.Should().BeNull();
            actual.Should().Be(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(Int16Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(Int16Enum.Zero).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(Int16Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>((Int16Enum)123).Should().BeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(nameof(Int16Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(nameof(Int16Enum.Zero)).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(nameof(Int16Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>("123").Should().BeFalse();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>("minvalue").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue), valueString: ((short)Int16Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero),     valueString: ((short)Int16Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue), valueString: ((short)Int16Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<Int16Enum, Int16EnumBooster>("123", ignoreCase).Should().Be((Int16Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue), valueString: ((short)Int16Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero),     valueString: ((short)Int16Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue), valueString: ((short)Int16Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<Int16Enum, Int16EnumBooster>("123", ignoreCase).Should().Be((Int16Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue), valueString: ((short)Int16Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero),     valueString: ((short)Int16Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue), valueString: ((short)Int16Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();
            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.valueString, ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((Int16Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue), valueString: ((short)Int16Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero),     valueString: ((short)Int16Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue), valueString: ((short)Int16Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.valueString, ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((Int16Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const Int16Enum undefined = (Int16Enum)123;
        var values = Enum.GetValues<Int16Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<Int16Enum, Int16EnumBooster>(x);
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class BasicUInt16Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt16Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<UInt16Enum, UInt16EnumBooster>(defined);
            actual.Should().NotBeNull();
            actual.Should().Be(expect);
        }
        //--- undefined value
        {
            const UInt16Enum undefined = (UInt16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<UInt16Enum, UInt16EnumBooster>(undefined);
            actual.Should().BeNull();
            actual.Should().Be(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>(UInt16Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>(UInt16Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>((UInt16Enum)123).Should().BeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>(nameof(UInt16Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>(nameof(UInt16Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>("123").Should().BeFalse();
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>("minvalue").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue), valueString: ((ushort)UInt16Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue), valueString: ((ushort)UInt16Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("123", ignoreCase).Should().Be((UInt16Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue), valueString: ((ushort)UInt16Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue), valueString: ((ushort)UInt16Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("123", ignoreCase).Should().Be((UInt16Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue), valueString: ((ushort)UInt16Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue), valueString: ((ushort)UInt16Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();
            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.valueString, ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((UInt16Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue), valueString: ((ushort)UInt16Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue), valueString: ((ushort)UInt16Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.valueString, ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((UInt16Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const UInt16Enum undefined = (UInt16Enum)123;
        var values = Enum.GetValues<UInt16Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<UInt16Enum, UInt16EnumBooster>(x);
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class BasicInt32Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int32Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<Int32Enum, Int32EnumBooster>(defined);
            actual.Should().NotBeNull();
            actual.Should().Be(expect);
        }
        //--- undefined value
        {
            const Int32Enum undefined = (Int32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<Int32Enum, Int32EnumBooster>(undefined);
            actual.Should().BeNull();
            actual.Should().Be(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(Int32Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(Int32Enum.Zero).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(Int32Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>((Int32Enum)123).Should().BeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(nameof(Int32Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(nameof(Int32Enum.Zero)).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(nameof(Int32Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>("123").Should().BeFalse();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>("minvalue").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue), valueString: ((int)Int32Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero),     valueString: ((int)Int32Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue), valueString: ((int)Int32Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<Int32Enum, Int32EnumBooster>("123", ignoreCase).Should().Be((Int32Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue), valueString: ((int)Int32Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero),     valueString: ((int)Int32Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue), valueString: ((int)Int32Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<Int32Enum, Int32EnumBooster>("123", ignoreCase).Should().Be((Int32Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue), valueString: ((int)Int32Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero),     valueString: ((int)Int32Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue), valueString: ((int)Int32Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();
            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.valueString, ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((Int32Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue), valueString: ((int)Int32Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero),     valueString: ((int)Int32Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue), valueString: ((int)Int32Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.valueString, ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((Int32Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const Int32Enum undefined = (Int32Enum)123;
        var values = Enum.GetValues<Int32Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<Int32Enum, Int32EnumBooster>(x);
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class BasicUInt32Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt32Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<UInt32Enum, UInt32EnumBooster>(defined);
            actual.Should().NotBeNull();
            actual.Should().Be(expect);
        }
        //--- undefined value
        {
            const UInt32Enum undefined = (UInt32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<UInt32Enum, UInt32EnumBooster>(undefined);
            actual.Should().BeNull();
            actual.Should().Be(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>(UInt32Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>(UInt32Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>((UInt32Enum)123).Should().BeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>(nameof(UInt32Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>(nameof(UInt32Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>("123").Should().BeFalse();
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>("minvalue").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue), valueString: ((uint)UInt32Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue), valueString: ((uint)UInt32Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("123", ignoreCase).Should().Be((UInt32Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue), valueString: ((uint)UInt32Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue), valueString: ((uint)UInt32Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("123", ignoreCase).Should().Be((UInt32Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue), valueString: ((uint)UInt32Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue), valueString: ((uint)UInt32Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();
            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.valueString, ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((UInt32Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue), valueString: ((uint)UInt32Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue), valueString: ((uint)UInt32Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.valueString, ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((UInt32Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const UInt32Enum undefined = (UInt32Enum)123;
        var values = Enum.GetValues<UInt32Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<UInt32Enum, UInt32EnumBooster>(x);
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class BasicInt64Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int64Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<Int64Enum, Int64EnumBooster>(defined);
            actual.Should().NotBeNull();
            actual.Should().Be(expect);
        }
        //--- undefined value
        {
            const Int64Enum undefined = (Int64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<Int64Enum, Int64EnumBooster>(undefined);
            actual.Should().BeNull();
            actual.Should().Be(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(Int64Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(Int64Enum.Zero).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(Int64Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>((Int64Enum)123).Should().BeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(nameof(Int64Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(nameof(Int64Enum.Zero)).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(nameof(Int64Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>("123").Should().BeFalse();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>("minvalue").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue), valueString: ((long)Int64Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero),     valueString: ((long)Int64Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue), valueString: ((long)Int64Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<Int64Enum, Int64EnumBooster>("123", ignoreCase).Should().Be((Int64Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue), valueString: ((long)Int64Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero),     valueString: ((long)Int64Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue), valueString: ((long)Int64Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<Int64Enum, Int64EnumBooster>("123", ignoreCase).Should().Be((Int64Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue), valueString: ((long)Int64Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero),     valueString: ((long)Int64Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue), valueString: ((long)Int64Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();
            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.valueString, ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((Int64Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue), valueString: ((long)Int64Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero),     valueString: ((long)Int64Enum.Zero).ToString(CultureInfo.InvariantCulture)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue), valueString: ((long)Int64Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.valueString, ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((Int64Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const Int64Enum undefined = (Int64Enum)123;
        var values = Enum.GetValues<Int64Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<Int64Enum, Int64EnumBooster>(x);
            actual.Should().Be(expect);
        }
    }
}



[TestClass]
public sealed class BasicUInt64Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt64Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<UInt64Enum, UInt64EnumBooster>(defined);
            actual.Should().NotBeNull();
            actual.Should().Be(expect);
        }
        //--- undefined value
        {
            const UInt64Enum undefined = (UInt64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<UInt64Enum, UInt64EnumBooster>(undefined);
            actual.Should().BeNull();
            actual.Should().Be(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>(UInt64Enum.MinValue).Should().BeTrue();
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>(UInt64Enum.MaxValue).Should().BeTrue();
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>((UInt64Enum)123).Should().BeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>(nameof(UInt64Enum.MinValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>(nameof(UInt64Enum.MaxValue)).Should().BeTrue();
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>("123").Should().BeFalse();
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>("minvalue").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue), valueString: ((ulong)UInt64Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue), valueString: ((ulong)UInt64Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FluentActions.Invoking(() => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase)).Should().Throw<ArgumentException>();
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("123", ignoreCase).Should().Be((UInt64Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue), valueString: ((ulong)UInt64Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue), valueString: ((ulong)UInt64Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.valueString, ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>((string?)null, ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(" ", ignoreCase)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("ABCDE", ignoreCase)).Should().Throw<ArgumentException>();
        FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("123", ignoreCase).Should().Be((UInt64Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue), valueString: ((ulong)UInt64Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue), valueString: ((ulong)UInt64Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();
            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).Should().BeFalse();

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.valueString, ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((UInt64Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue), valueString: ((ulong)UInt64Enum.MinValue).ToString(CultureInfo.InvariantCulture)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue), valueString: ((ulong)UInt64Enum.MaxValue).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name, ignoreCase, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.valueString, ignoreCase, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>((string?)null, ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(" ", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("ABCDE", ignoreCase, out var _).Should().BeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("123", ignoreCase, out var r).Should().BeTrue();
        r.Should().Be((UInt64Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const UInt64Enum undefined = (UInt64Enum)123;
        var values = Enum.GetValues<UInt64Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<UInt64Enum, UInt64EnumBooster>(x);
            actual.Should().Be(expect);
        }
    }
}



