// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
#nullable enable

using System;
using System.Globalization;
using System.Linq;
using System.Text;
using FastEnumUtility.UnitTests.Models;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Shouldly;

namespace FastEnumUtility.UnitTests.Cases.Generators;



[TestClass]
public sealed class BasicSByteTests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<SByteEnum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<SByteEnum, SByteEnumBooster>(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const SByteEnum undefined = (SByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<SByteEnum, SByteEnumBooster>(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(SByteEnum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(SByteEnum.Zero).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(SByteEnum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>((SByteEnum)123).ShouldBeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(nameof(SByteEnum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(nameof(SByteEnum.Zero)).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>(nameof(SByteEnum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>("123").ShouldBeFalse();
        FastEnum.IsDefined<SByteEnum, SByteEnumBooster>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<SByteEnum, SByteEnumBooster>("123", ignoreCase).ShouldBe((SByteEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SByteEnum, SByteEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SByteEnum, SByteEnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<SByteEnum, SByteEnumBooster>("123", ignoreCase).ShouldBe((SByteEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((SByteEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: SByteEnum.MinValue, name: nameof(SByteEnum.MinValue)),
            (value: SByteEnum.Zero,     name: nameof(SByteEnum.Zero)),
            (value: SByteEnum.MaxValue, name: nameof(SByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((sbyte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<SByteEnum, SByteEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SByteEnum, SByteEnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((SByteEnum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const SByteEnum undefined = (SByteEnum)123;
        var values = Enum.GetValues<SByteEnum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<SByteEnum, SByteEnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicByteTests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<ByteEnum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<ByteEnum, ByteEnumBooster>(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const ByteEnum undefined = (ByteEnum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<ByteEnum, ByteEnumBooster>(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>(ByteEnum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>(ByteEnum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>((ByteEnum)123).ShouldBeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>(nameof(ByteEnum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>(nameof(ByteEnum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>("123").ShouldBeFalse();
        FastEnum.IsDefined<ByteEnum, ByteEnumBooster>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<ByteEnum, ByteEnumBooster>("123", ignoreCase).ShouldBe((ByteEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<ByteEnum, ByteEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<ByteEnum, ByteEnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<ByteEnum, ByteEnumBooster>("123", ignoreCase).ShouldBe((ByteEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((ByteEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: ByteEnum.MinValue, name: nameof(ByteEnum.MinValue)),
            (value: ByteEnum.MaxValue, name: nameof(ByteEnum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<ByteEnum, ByteEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<ByteEnum, ByteEnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((ByteEnum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const ByteEnum undefined = (ByteEnum)123;
        var values = Enum.GetValues<ByteEnum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<ByteEnum, ByteEnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicInt16Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int16Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<Int16Enum, Int16EnumBooster>(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const Int16Enum undefined = (Int16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<Int16Enum, Int16EnumBooster>(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(Int16Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(Int16Enum.Zero).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(Int16Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>((Int16Enum)123).ShouldBeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(nameof(Int16Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(nameof(Int16Enum.Zero)).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>(nameof(Int16Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>("123").ShouldBeFalse();
        FastEnum.IsDefined<Int16Enum, Int16EnumBooster>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<Int16Enum, Int16EnumBooster>("123", ignoreCase).ShouldBe((Int16Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int16Enum, Int16EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int16Enum, Int16EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<Int16Enum, Int16EnumBooster>("123", ignoreCase).ShouldBe((Int16Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int16Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int16Enum.MinValue, name: nameof(Int16Enum.MinValue)),
            (value: Int16Enum.Zero,     name: nameof(Int16Enum.Zero)),
            (value: Int16Enum.MaxValue, name: nameof(Int16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((short)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<Int16Enum, Int16EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int16Enum, Int16EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int16Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const Int16Enum undefined = (Int16Enum)123;
        var values = Enum.GetValues<Int16Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<Int16Enum, Int16EnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicUInt16Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt16Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<UInt16Enum, UInt16EnumBooster>(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const UInt16Enum undefined = (UInt16Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<UInt16Enum, UInt16EnumBooster>(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>(UInt16Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>(UInt16Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>((UInt16Enum)123).ShouldBeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>(nameof(UInt16Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>(nameof(UInt16Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>("123").ShouldBeFalse();
        FastEnum.IsDefined<UInt16Enum, UInt16EnumBooster>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("123", ignoreCase).ShouldBe((UInt16Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt16Enum, UInt16EnumBooster>("123", ignoreCase).ShouldBe((UInt16Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt16Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt16Enum.MinValue, name: nameof(UInt16Enum.MinValue)),
            (value: UInt16Enum.MaxValue, name: nameof(UInt16Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ushort)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt16Enum, UInt16EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt16Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const UInt16Enum undefined = (UInt16Enum)123;
        var values = Enum.GetValues<UInt16Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<UInt16Enum, UInt16EnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicInt32Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int32Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<Int32Enum, Int32EnumBooster>(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const Int32Enum undefined = (Int32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<Int32Enum, Int32EnumBooster>(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(Int32Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(Int32Enum.Zero).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(Int32Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>((Int32Enum)123).ShouldBeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(nameof(Int32Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(nameof(Int32Enum.Zero)).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>(nameof(Int32Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>("123").ShouldBeFalse();
        FastEnum.IsDefined<Int32Enum, Int32EnumBooster>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<Int32Enum, Int32EnumBooster>("123", ignoreCase).ShouldBe((Int32Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int32Enum, Int32EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int32Enum, Int32EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<Int32Enum, Int32EnumBooster>("123", ignoreCase).ShouldBe((Int32Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int32Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int32Enum.MinValue, name: nameof(Int32Enum.MinValue)),
            (value: Int32Enum.Zero,     name: nameof(Int32Enum.Zero)),
            (value: Int32Enum.MaxValue, name: nameof(Int32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((int)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<Int32Enum, Int32EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int32Enum, Int32EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int32Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const Int32Enum undefined = (Int32Enum)123;
        var values = Enum.GetValues<Int32Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<Int32Enum, Int32EnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicUInt32Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt32Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<UInt32Enum, UInt32EnumBooster>(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const UInt32Enum undefined = (UInt32Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<UInt32Enum, UInt32EnumBooster>(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>(UInt32Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>(UInt32Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>((UInt32Enum)123).ShouldBeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>(nameof(UInt32Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>(nameof(UInt32Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>("123").ShouldBeFalse();
        FastEnum.IsDefined<UInt32Enum, UInt32EnumBooster>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("123", ignoreCase).ShouldBe((UInt32Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt32Enum, UInt32EnumBooster>("123", ignoreCase).ShouldBe((UInt32Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt32Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt32Enum.MinValue, name: nameof(UInt32Enum.MinValue)),
            (value: UInt32Enum.MaxValue, name: nameof(UInt32Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((uint)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt32Enum, UInt32EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt32Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const UInt32Enum undefined = (UInt32Enum)123;
        var values = Enum.GetValues<UInt32Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<UInt32Enum, UInt32EnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicInt64Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<Int64Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<Int64Enum, Int64EnumBooster>(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const Int64Enum undefined = (Int64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<Int64Enum, Int64EnumBooster>(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(Int64Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(Int64Enum.Zero).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(Int64Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>((Int64Enum)123).ShouldBeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(nameof(Int64Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(nameof(Int64Enum.Zero)).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>(nameof(Int64Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>("123").ShouldBeFalse();
        FastEnum.IsDefined<Int64Enum, Int64EnumBooster>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<Int64Enum, Int64EnumBooster>("123", ignoreCase).ShouldBe((Int64Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<Int64Enum, Int64EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<Int64Enum, Int64EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<Int64Enum, Int64EnumBooster>("123", ignoreCase).ShouldBe((Int64Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int64Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: Int64Enum.MinValue, name: nameof(Int64Enum.MinValue)),
            (value: Int64Enum.Zero,     name: nameof(Int64Enum.Zero)),
            (value: Int64Enum.MaxValue, name: nameof(Int64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((long)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<Int64Enum, Int64EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<Int64Enum, Int64EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((Int64Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const Int64Enum undefined = (Int64Enum)123;
        var values = Enum.GetValues<Int64Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<Int64Enum, Int64EnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class BasicUInt64Tests
{
    [TestMethod]
    public void GetName()
    {
        //--- defined value
        foreach (var defined in Enum.GetValues<UInt64Enum>())
        {
            var expect = Enum.GetName(defined);
            var actual = FastEnum.GetName<UInt64Enum, UInt64EnumBooster>(defined);
            actual.ShouldNotBeNull();
            actual.ShouldBe(expect);
        }
        //--- undefined value
        {
            const UInt64Enum undefined = (UInt64Enum)123;
            var expect = Enum.GetName(undefined);
            var actual = FastEnum.GetName<UInt64Enum, UInt64EnumBooster>(undefined);
            actual.ShouldBeNull();
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>(UInt64Enum.MinValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>(UInt64Enum.MaxValue).ShouldBeTrue();
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>((UInt64Enum)123).ShouldBeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>(nameof(UInt64Enum.MinValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>(nameof(UInt64Enum.MaxValue)).ShouldBeTrue();
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>("123").ShouldBeFalse();
        FastEnum.IsDefined<UInt64Enum, UInt64EnumBooster>("minvalue").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            Should.Throw<ArgumentException>(() => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("123", ignoreCase).ShouldBe((UInt64Enum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<UInt64Enum, UInt64EnumBooster>("123", ignoreCase).ShouldBe((UInt64Enum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt64Enum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: UInt64Enum.MinValue, name: nameof(UInt64Enum.MinValue)),
            (value: UInt64Enum.MaxValue, name: nameof(UInt64Enum.MaxValue)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((ulong)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<UInt64Enum, UInt64EnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((UInt64Enum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        const UInt64Enum undefined = (UInt64Enum)123;
        var values = Enum.GetValues<UInt64Enum>().Append(undefined);
        foreach (var x in values)
        {
            var expect = x.ToString();
            var actual = FastEnum.ToString<UInt64Enum, UInt64EnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }
}



