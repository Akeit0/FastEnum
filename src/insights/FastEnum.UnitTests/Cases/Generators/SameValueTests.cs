// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
#nullable enable

using System;
using System.Globalization;
using FastEnumUtility.UnitTests.Models;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Shouldly;

namespace FastEnumUtility.UnitTests.Cases.Generators;



[TestClass]
public sealed class SameValueContinuousTests
{
    [TestMethod]
    public void GetName()
    {
        foreach (var x in Enum.GetValues<SameValueContinuousEnum>())
        {
            var expect = Enum.GetName(x);
            var actual = FastEnum.GetName<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<SameValueContinuousEnum, SameValueContinuousEnumBooster>(SameValueContinuousEnum.A).ShouldBeTrue();
        FastEnum.IsDefined<SameValueContinuousEnum, SameValueContinuousEnumBooster>(SameValueContinuousEnum.B).ShouldBeTrue();
        FastEnum.IsDefined<SameValueContinuousEnum, SameValueContinuousEnumBooster>(SameValueContinuousEnum.C).ShouldBeTrue();
        FastEnum.IsDefined<SameValueContinuousEnum, SameValueContinuousEnumBooster>(SameValueContinuousEnum.D).ShouldBeTrue();
        FastEnum.IsDefined<SameValueContinuousEnum, SameValueContinuousEnumBooster>((SameValueContinuousEnum)123).ShouldBeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<SameValueContinuousEnum, SameValueContinuousEnumBooster>(nameof(SameValueContinuousEnum.A)).ShouldBeTrue();
        FastEnum.IsDefined<SameValueContinuousEnum, SameValueContinuousEnumBooster>(nameof(SameValueContinuousEnum.B)).ShouldBeTrue();
        FastEnum.IsDefined<SameValueContinuousEnum, SameValueContinuousEnumBooster>(nameof(SameValueContinuousEnum.C)).ShouldBeTrue();
        FastEnum.IsDefined<SameValueContinuousEnum, SameValueContinuousEnumBooster>(nameof(SameValueContinuousEnum.D)).ShouldBeTrue();
        FastEnum.IsDefined<SameValueContinuousEnum, SameValueContinuousEnumBooster>("123").ShouldBeFalse();
        FastEnum.IsDefined<SameValueContinuousEnum, SameValueContinuousEnumBooster>("value").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: SameValueContinuousEnum.A, name: nameof(SameValueContinuousEnum.A)),
            (value: SameValueContinuousEnum.B, name: nameof(SameValueContinuousEnum.B)),
            (value: SameValueContinuousEnum.C, name: nameof(SameValueContinuousEnum.C)),
            (value: SameValueContinuousEnum.D, name: nameof(SameValueContinuousEnum.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("123", ignoreCase).ShouldBe((SameValueContinuousEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: SameValueContinuousEnum.A, name: nameof(SameValueContinuousEnum.A)),
            (value: SameValueContinuousEnum.B, name: nameof(SameValueContinuousEnum.B)),
            (value: SameValueContinuousEnum.C, name: nameof(SameValueContinuousEnum.C)),
            (value: SameValueContinuousEnum.D, name: nameof(SameValueContinuousEnum.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("123", ignoreCase).ShouldBe((SameValueContinuousEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: SameValueContinuousEnum.A, name: nameof(SameValueContinuousEnum.A)),
            (value: SameValueContinuousEnum.B, name: nameof(SameValueContinuousEnum.B)),
            (value: SameValueContinuousEnum.C, name: nameof(SameValueContinuousEnum.C)),
            (value: SameValueContinuousEnum.D, name: nameof(SameValueContinuousEnum.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeTrue();

            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((SameValueContinuousEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: SameValueContinuousEnum.A, name: nameof(SameValueContinuousEnum.A)),
            (value: SameValueContinuousEnum.B, name: nameof(SameValueContinuousEnum.B)),
            (value: SameValueContinuousEnum.C, name: nameof(SameValueContinuousEnum.C)),
            (value: SameValueContinuousEnum.D, name: nameof(SameValueContinuousEnum.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueContinuousEnum, SameValueContinuousEnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((SameValueContinuousEnum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        var values = Enum.GetValues<SameValueContinuousEnum>();
        foreach (var x in values)
        {
            var expect = Enum.GetName(x);
            var actual = FastEnum.ToString<SameValueContinuousEnum, SameValueContinuousEnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }
}



[TestClass]
public sealed class SameValueDiscontinuousTests
{
    [TestMethod]
    public void GetName()
    {
        foreach (var x in Enum.GetValues<SameValueDiscontinuousEnum>())
        {
            var expect = Enum.GetName(x);
            var actual = FastEnum.GetName<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(SameValueDiscontinuousEnum.A).ShouldBeTrue();
        FastEnum.IsDefined<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(SameValueDiscontinuousEnum.B).ShouldBeTrue();
        FastEnum.IsDefined<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(SameValueDiscontinuousEnum.C).ShouldBeTrue();
        FastEnum.IsDefined<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(SameValueDiscontinuousEnum.D).ShouldBeTrue();
        FastEnum.IsDefined<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>((SameValueDiscontinuousEnum)123).ShouldBeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(nameof(SameValueDiscontinuousEnum.A)).ShouldBeTrue();
        FastEnum.IsDefined<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(nameof(SameValueDiscontinuousEnum.B)).ShouldBeTrue();
        FastEnum.IsDefined<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(nameof(SameValueDiscontinuousEnum.C)).ShouldBeTrue();
        FastEnum.IsDefined<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(nameof(SameValueDiscontinuousEnum.D)).ShouldBeTrue();
        FastEnum.IsDefined<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("123").ShouldBeFalse();
        FastEnum.IsDefined<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("value").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: SameValueDiscontinuousEnum.A, name: nameof(SameValueDiscontinuousEnum.A)),
            (value: SameValueDiscontinuousEnum.B, name: nameof(SameValueDiscontinuousEnum.B)),
            (value: SameValueDiscontinuousEnum.C, name: nameof(SameValueDiscontinuousEnum.C)),
            (value: SameValueDiscontinuousEnum.D, name: nameof(SameValueDiscontinuousEnum.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("123", ignoreCase).ShouldBe((SameValueDiscontinuousEnum)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: SameValueDiscontinuousEnum.A, name: nameof(SameValueDiscontinuousEnum.A)),
            (value: SameValueDiscontinuousEnum.B, name: nameof(SameValueDiscontinuousEnum.B)),
            (value: SameValueDiscontinuousEnum.C, name: nameof(SameValueDiscontinuousEnum.C)),
            (value: SameValueDiscontinuousEnum.D, name: nameof(SameValueDiscontinuousEnum.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("ABCDE", ignoreCase));
        FastEnum.Parse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("123", ignoreCase).ShouldBe((SameValueDiscontinuousEnum)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: SameValueDiscontinuousEnum.A, name: nameof(SameValueDiscontinuousEnum.A)),
            (value: SameValueDiscontinuousEnum.B, name: nameof(SameValueDiscontinuousEnum.B)),
            (value: SameValueDiscontinuousEnum.C, name: nameof(SameValueDiscontinuousEnum.C)),
            (value: SameValueDiscontinuousEnum.D, name: nameof(SameValueDiscontinuousEnum.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeTrue();

            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((SameValueDiscontinuousEnum)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: SameValueDiscontinuousEnum.A, name: nameof(SameValueDiscontinuousEnum.A)),
            (value: SameValueDiscontinuousEnum.B, name: nameof(SameValueDiscontinuousEnum.B)),
            (value: SameValueDiscontinuousEnum.C, name: nameof(SameValueDiscontinuousEnum.C)),
            (value: SameValueDiscontinuousEnum.D, name: nameof(SameValueDiscontinuousEnum.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((byte)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((SameValueDiscontinuousEnum)123);
    }


    [TestMethod]
    public void FastToString()
    {
        var values = Enum.GetValues<SameValueDiscontinuousEnum>();
        foreach (var x in values)
        {
            var expect = Enum.GetName(x);
            var actual = FastEnum.ToString<SameValueDiscontinuousEnum, SameValueDiscontinuousEnumBooster>(x);
            actual.ShouldBe(expect);
        }
    }
}



