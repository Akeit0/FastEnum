<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var parameters = new[]
    {
        new { EnumType = "SameValueContinuousEnum",    UnderlyingType = "byte", AliasType = "Byte", ConjugateType = "sbyte", BoosterType = "SameValueContinuousEnumBooster",    IsContinuous = true },
        new { EnumType = "SameValueDiscontinuousEnum", UnderlyingType = "byte", AliasType = "Byte", ConjugateType = "sbyte", BoosterType = "SameValueDiscontinuousEnumBooster", IsContinuous = false },
    };
#>
// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
#nullable enable

using System;
using System.Globalization;
using FastEnumUtility.UnitTests.Models;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Shouldly;

namespace FastEnumUtility.UnitTests.Cases.Generators;



<# foreach (var x in parameters) { #>
[TestClass]
public sealed class SameValue<#= x.IsContinuous ? "Continuous" : "Discontinuous" #>Tests
{
    [TestMethod]
    public void GetName()
    {
        foreach (var x in Enum.GetValues<<#= x.EnumType #>>())
        {
            var expect = Enum.GetName(x);
            var actual = FastEnum.GetName<<#= x.EnumType #>, <#= x.BoosterType #>>(x);
            actual.ShouldBe(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(<#= x.EnumType #>.A).ShouldBeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(<#= x.EnumType #>.B).ShouldBeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(<#= x.EnumType #>.C).ShouldBeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(<#= x.EnumType #>.D).ShouldBeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>((<#= x.EnumType #>)123).ShouldBeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(nameof(<#= x.EnumType #>.A)).ShouldBeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(nameof(<#= x.EnumType #>.B)).ShouldBeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(nameof(<#= x.EnumType #>.C)).ShouldBeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(nameof(<#= x.EnumType #>.D)).ShouldBeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>("123").ShouldBeFalse();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>("value").ShouldBeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: <#= x.EnumType #>.A, name: nameof(<#= x.EnumType #>.A)),
            (value: <#= x.EnumType #>.B, name: nameof(<#= x.EnumType #>.B)),
            (value: <#= x.EnumType #>.C, name: nameof(<#= x.EnumType #>.C)),
            (value: <#= x.EnumType #>.D, name: nameof(<#= x.EnumType #>.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((<#= x.UnderlyingType #>)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name, ignoreCase).ShouldBe(x.value);
            Should.Throw<ArgumentException>(() => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase));
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("ABCDE", ignoreCase));
        FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("123", ignoreCase).ShouldBe((<#= x.EnumType #>)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: <#= x.EnumType #>.A, name: nameof(<#= x.EnumType #>.A)),
            (value: <#= x.EnumType #>.B, name: nameof(<#= x.EnumType #>.B)),
            (value: <#= x.EnumType #>.C, name: nameof(<#= x.EnumType #>.C)),
            (value: <#= x.EnumType #>.D, name: nameof(<#= x.EnumType #>.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((<#= x.UnderlyingType #>)x.value).ToString(CultureInfo.InvariantCulture);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString, ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase).ShouldBe(x.value);
        }
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>((string?)null, ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(" ", ignoreCase));
        Should.Throw<ArgumentException>(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("ABCDE", ignoreCase));
        FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("123", ignoreCase).ShouldBe((<#= x.EnumType #>)123);
    }


    [TestMethod]
    public void TryParse()
    {
        const bool ignoreCase = false;
        var parameters = new[]
        {
            (value: <#= x.EnumType #>.A, name: nameof(<#= x.EnumType #>.A)),
            (value: <#= x.EnumType #>.B, name: nameof(<#= x.EnumType #>.B)),
            (value: <#= x.EnumType #>.C, name: nameof(<#= x.EnumType #>.C)),
            (value: <#= x.EnumType #>.D, name: nameof(<#= x.EnumType #>.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((<#= x.UnderlyingType #>)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeFalse();
            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var _).ShouldBeTrue();

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString, ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);
        }
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((<#= x.EnumType #>)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        const bool ignoreCase = true;
        var parameters = new[]
        {
            (value: <#= x.EnumType #>.A, name: nameof(<#= x.EnumType #>.A)),
            (value: <#= x.EnumType #>.B, name: nameof(<#= x.EnumType #>.B)),
            (value: <#= x.EnumType #>.C, name: nameof(<#= x.EnumType #>.C)),
            (value: <#= x.EnumType #>.D, name: nameof(<#= x.EnumType #>.D)),
        };
        foreach (var x in parameters)
        {
            var valueString = ((<#= x.UnderlyingType #>)x.value).ToString(CultureInfo.InvariantCulture);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name, ignoreCase, out var r1).ShouldBeTrue();
            r1.ShouldBe(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r2).ShouldBeTrue();
            r2.ShouldBe(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r3).ShouldBeTrue();
            r3.ShouldBe(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString, ignoreCase, out var r4).ShouldBeTrue();
            r4.ShouldBe(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString.ToLower(CultureInfo.InvariantCulture), ignoreCase, out var r5).ShouldBeTrue();
            r5.ShouldBe(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(valueString.ToUpper(CultureInfo.InvariantCulture), ignoreCase, out var r6).ShouldBeTrue();
            r6.ShouldBe(x.value);
        }
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>((string?)null, ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(" ", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("ABCDE", ignoreCase, out var _).ShouldBeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("123", ignoreCase, out var r).ShouldBeTrue();
        r.ShouldBe((<#= x.EnumType #>)123);
    }


    [TestMethod]
    public void FastToString()
    {
        var values = Enum.GetValues<<#= x.EnumType #>>();
        foreach (var x in values)
        {
            var expect = Enum.GetName(x);
            var actual = FastEnum.ToString<<#= x.EnumType #>, <#= x.BoosterType #>>(x);
            actual.ShouldBe(expect);
        }
    }
}



<# } #>
