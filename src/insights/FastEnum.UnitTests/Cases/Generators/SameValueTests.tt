<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var parameters = new[]
    {
        new { EnumType = "SameValueContinuousEnum",    UnderlyingType = "byte", AliasType = "Byte", ConjugateType = "sbyte", BoosterType = "SameValueContinuousEnumBooster",    IsContinuous = true },
        new { EnumType = "SameValueDiscontinuousEnum", UnderlyingType = "byte", AliasType = "Byte", ConjugateType = "sbyte", BoosterType = "SameValueDiscontinuousEnumBooster", IsContinuous = false },
    };
#>
// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
#nullable enable

using System;
using System.Globalization;
using FastEnumUtility.UnitTests.Models;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace FastEnumUtility.UnitTests.Cases.Generators;



<# foreach (var x in parameters) { #>
[TestClass]
public sealed class SameValue<#= x.IsContinuous ? "Continuous" : "Discontinuous" #>Tests
{
    [TestMethod]
    public void GetName()
    {
        var values = Enum.GetValues<<#= x.EnumType #>>();
        foreach (var x in values)
        {
            var expect = Enum.GetName(x);
            var actual = FastEnum.GetName<<#= x.EnumType #>, <#= x.BoosterType #>>(x);
            actual.Should().Be(expect);
        }
    }


    [TestMethod]
    public void IsDefined()
    {
        //--- IsDefined(TEnum)
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(<#= x.EnumType #>.A).Should().BeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(<#= x.EnumType #>.B).Should().BeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(<#= x.EnumType #>.C).Should().BeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(<#= x.EnumType #>.D).Should().BeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>((<#= x.EnumType #>)123).Should().BeFalse();

        //--- IsDefined(ReadOnlySpan<char>)
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(nameof(<#= x.EnumType #>.A)).Should().BeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(nameof(<#= x.EnumType #>.B)).Should().BeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(nameof(<#= x.EnumType #>.C)).Should().BeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>(nameof(<#= x.EnumType #>.D)).Should().BeTrue();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>("123").Should().BeFalse();
        FastEnum.IsDefined<<#= x.EnumType #>, <#= x.BoosterType #>>("value").Should().BeFalse();
    }


    [TestMethod]
    public void Parse()
    {
        var parameters = new[]
        {
            (value: <#= x.EnumType #>.A, name: nameof(<#= x.EnumType #>.A), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.A).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.B, name: nameof(<#= x.EnumType #>.B), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.B).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.C, name: nameof(<#= x.EnumType #>.C), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.C).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.D, name: nameof(<#= x.EnumType #>.D), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.D).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name).Should().Be(x.value);
            FluentActions.Invoking(() => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToLower(CultureInfo.InvariantCulture))).Should().Throw<ArgumentException>();
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString.ToLower(CultureInfo.InvariantCulture)).Should().Be(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString.ToUpper(CultureInfo.InvariantCulture)).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>((string?)null)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(" ")).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("ABCDE")).Should().Throw<ArgumentException>();
        FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("123").Should().Be((<#= x.EnumType #>)123);
    }


    [TestMethod]
    public void ParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: <#= x.EnumType #>.A, name: nameof(<#= x.EnumType #>.A), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.A).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.B, name: nameof(<#= x.EnumType #>.B), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.B).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.C, name: nameof(<#= x.EnumType #>.C), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.C).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.D, name: nameof(<#= x.EnumType #>.D), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.D).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name).Should().Be(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString).Should().Be(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString.ToLower(CultureInfo.InvariantCulture), true).Should().Be(x.value);
            FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true).Should().Be(x.value);
        }
        FluentActions.Invoking(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>((string?)null, true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>(" ", true)).Should().Throw<ArgumentException>();
        FluentActions.Invoking(static () => FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("ABCDE", true)).Should().Throw<ArgumentException>();
        FastEnum.Parse<<#= x.EnumType #>, <#= x.BoosterType #>>("123").Should().Be((<#= x.EnumType #>)123);
    }


    [TestMethod]
    public void TryParse()
    {
        var parameters = new[]
        {
            (value: <#= x.EnumType #>.A, name: nameof(<#= x.EnumType #>.A), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.A).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.B, name: nameof(<#= x.EnumType #>.B), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.B).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.C, name: nameof(<#= x.EnumType #>.C), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.C).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.D, name: nameof(<#= x.EnumType #>.D), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.D).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToLower(CultureInfo.InvariantCulture), out var _).Should().BeFalse();
            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToUpper(CultureInfo.InvariantCulture), out var _).Should().BeTrue();

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString.ToLower(CultureInfo.InvariantCulture), out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString.ToUpper(CultureInfo.InvariantCulture), out var r4).Should().BeTrue();
            r4.Should().Be(x.value);
        }
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>((string?)null, out var _).Should().BeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("", out var _).Should().BeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(" ", out var _).Should().BeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("ABCDE", out var _).Should().BeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("123", out var r).Should().BeTrue();
        r.Should().Be((<#= x.EnumType #>)123);
    }


    [TestMethod]
    public void TryParseIgnoreCase()
    {
        var parameters = new[]
        {
            (value: <#= x.EnumType #>.A, name: nameof(<#= x.EnumType #>.A), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.A).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.B, name: nameof(<#= x.EnumType #>.B), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.B).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.C, name: nameof(<#= x.EnumType #>.C), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.C).ToString(CultureInfo.InvariantCulture)),
            (value: <#= x.EnumType #>.D, name: nameof(<#= x.EnumType #>.D), valueString: ((<#= x.UnderlyingType #>)<#= x.EnumType #>.D).ToString(CultureInfo.InvariantCulture)),
        };
        foreach (var x in parameters)
        {
            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name, true, out var r1).Should().BeTrue();
            r1.Should().Be(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToLower(CultureInfo.InvariantCulture), true, out var r2).Should().BeTrue();
            r2.Should().Be(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.name.ToUpper(CultureInfo.InvariantCulture), true, out var r3).Should().BeTrue();
            r3.Should().Be(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString, true, out var r4).Should().BeTrue();
            r4.Should().Be(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString.ToLower(CultureInfo.InvariantCulture), true, out var r5).Should().BeTrue();
            r5.Should().Be(x.value);

            FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(x.valueString.ToUpper(CultureInfo.InvariantCulture), true, out var r6).Should().BeTrue();
            r6.Should().Be(x.value);
        }
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>((string?)null, true, out var _).Should().BeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("", true, out var _).Should().BeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>(" ", true, out var _).Should().BeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("ABCDE", true, out var _).Should().BeFalse();
        FastEnum.TryParse<<#= x.EnumType #>, <#= x.BoosterType #>>("123", true, out var r).Should().BeTrue();
        r.Should().Be((<#= x.EnumType #>)123);
    }


    [TestMethod]
    public void FastToString()
    {
        var values = Enum.GetValues<<#= x.EnumType #>>();
        foreach (var x in values)
        {
            var expect = Enum.GetName(x);
            var actual = FastEnum.ToString<<#= x.EnumType #>, <#= x.BoosterType #>>(x);
            actual.Should().Be(expect);
        }
    }
}



<# } #>
