using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace FastEnumUtility.Generators;



[Generator(LanguageNames.CSharp)]
public sealed class FastEnumGenerator : IIncrementalGenerator
{
    /// <inheritdoc/>
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        forEnumDeclaration(context);


        #region Local Functions
        static void forEnumDeclaration(IncrementalGeneratorInitializationContext context)
        {
            var typeDeclarations = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                fullyQualifiedMetadataName: "FastEnumUtility.FastEnumAttribute",
                predicate: static (node, cancellationToken) =>
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    return node is EnumDeclarationSyntax;
                },
                transform: static (context, cancellationToken) =>
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    return context;
                }
            );
            var parseOptions = context.ParseOptionsProvider;
            var source = typeDeclarations.Combine(parseOptions);

            context.RegisterSourceOutput(source, static (context, source) =>
            {
                var syntaxContext = source.Left;
                var parseOptions = (CSharpParseOptions)source.Right;
                var param = new EnumDeclarationEmitter.EmitParameters(syntaxContext, parseOptions);
                EnumDeclarationEmitter.Emit(context, param);
            });
        }
        #endregion
    }
}



file static class EnumDeclarationEmitter
{
    public static void Emit(SourceProductionContext sourceContext, EmitParameters param)
    {
        var sb = new StringBuilder();

        //--- header
        sb.AppendLine("""
            // <auto-generated>
            // This .cs file is generated by FastEnum source generator.
            // </auto-generated>
            #nullable enable
            
            using System;
            using System.Globalization;
            using System.Runtime.CompilerServices;
            using FastEnumUtility;
            """);

        //--- start namespace
        if (!param.IsGlobalNamespace)
        {
            sb.AppendLine($"""

                namespace {param.Namespace};
                """);
        }

        //--- start class
        sb.AppendLine($$"""

            file sealed class FastEnumOperation : IFastEnumOperation<{{param.TypeName}}>
            {
                [ModuleInitializer]
                public static void Initialize()
                {
                    FastEnumOperationProvider.Register(new FastEnumOperation());
                }
            """);

        //--- IFastEnumOperation<T>
        sb.AppendLine("""

                #region IFastEnumOperation<T>
            """);

        //--- GetName
        {
            sb.AppendLine($$"""
                    /// <inheritdoc/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public string? GetName({{param.TypeName}} value)
                    {
                        return value switch
                        {
                """);
            foreach (var filed in param.Fields)
            {
                sb.AppendLine($"            {param.TypeName}.{filed.Name} => nameof({param.TypeName}.{filed.Name}),");
            }
            sb.AppendLine($$"""
                            _ => null,
                        };
                    }
                """);
        }

        //--- IsDefined
        {
            sb.AppendLine($$"""

                    /// <inheritdoc/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public bool IsDefined({{param.TypeName}} value)
                    {
                        return value switch
                        {
                """);
            foreach (var filed in param.Fields)
            {
                sb.AppendLine($"            {param.TypeName}.{filed.Name} => true,");
            }
            sb.AppendLine($$"""
                            _ => false,
                        };
                    }
                """);
        }

        //--- ToString
        {
            sb.AppendLine($$"""

                    /// <inheritdoc/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public string ToString({{param.TypeName}} value)
                    {
                        var name = this.GetName(value);
                        if (name is not null)
                            return name;

                        ref var x = ref Unsafe.As<{{param.TypeName}}, {{param.UnderlyingTypeName}}>(ref value);
                        return x.ToString(null, CultureInfo.InvariantCulture);
                    }
                """);
        }

        //--- TryParseName
        {
            sb.AppendLine($$"""

                    /// <inheritdoc/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public bool TryParseName(string text, out {{param.TypeName}} result)
                    {
                        switch (text)
                        {
                """);
            foreach (var filed in param.Fields)
            {
                sb.AppendLine($$"""
                                case nameof({{param.TypeName}}.{{filed.Name}}):
                                    result = {{param.TypeName}}.{{filed.Name}};
                                    return true;

                    """);
            }
            sb.AppendLine($$"""
                            default:
                                result = default;
                                return false;
                        }
                    }
                """);
        }

        //--- TryParseValue
        {
            sb.AppendLine($$"""

                    /// <inheritdoc/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public bool TryParseValue(string text, out {{param.TypeName}} result)
                    {
                        Unsafe.SkipInit(out result);
                        ref var x = ref Unsafe.As<{{param.TypeName}}, {{param.UnderlyingTypeName}}>(ref result);
                        return {{param.UnderlyingTypeName}}.TryParse(text, CultureInfo.InvariantCulture, out x);
                    }
                """);
        }

        //--- end class
        sb.AppendLine("""
                #endregion
            }
            """);

        //--- emit
        var generatedCode = sb.ToString();
        sourceContext.AddSource(param.FileName, generatedCode);
    }


    #region Nested Types
    public sealed class EmitParameters
    {
        #region Properties
        public LanguageVersion LanguageVersion { get; }
        public bool IsGlobalNamespace { get; }
        public string Namespace { get; }
        public string TypeName { get; }
        public string UnderlyingTypeName { get; }
        public IReadOnlyList<IFieldSymbol> Fields { get; }
        public string FileName { get; }
        #endregion


        #region Constructors
        public EmitParameters(GeneratorAttributeSyntaxContext context, CSharpParseOptions parseOptions)
        {
            var symbol = (INamedTypeSymbol)context.TargetSymbol;
            this.LanguageVersion = parseOptions.LanguageVersion;
            this.IsGlobalNamespace = symbol.ContainingNamespace.IsGlobalNamespace;
            this.Namespace = symbol.ContainingNamespace.ToDisplayString();
            this.TypeName = symbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            this.UnderlyingTypeName = symbol.EnumUnderlyingType?.ToDisplayString() ?? "int";
            this.Fields = symbol.GetMembers().OfType<IFieldSymbol>().ToArray();

            var typeName = this.TypeName.Replace("global::", "").Replace("<", "_").Replace(">", "_");
            this.FileName = $"{typeName}.FastEnumOperation.g.cs";
        }
        #endregion
    }
    #endregion
}
