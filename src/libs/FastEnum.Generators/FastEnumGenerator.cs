using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace FastEnumUtility.Generators;



[Generator(LanguageNames.CSharp)]
public sealed class FastEnumGenerator : IIncrementalGenerator
{
    /// <inheritdoc/>
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var source = context.SyntaxProvider.ForAttributeWithMetadataName
        (
            fullyQualifiedMetadataName: "FastEnumUtility.FastEnumAttribute",
            predicate: static (node, cancellationToken) =>
            {
                return node is EnumDeclarationSyntax;
            },
            transform: static (context, cancellationToken) =>
            {
                return (EnumDeclarationSyntax)context.TargetNode;
            }
        );
        context.RegisterSourceOutput(source, SourceCodeEmitter.Emit);
    }
}



file static class SourceCodeEmitter
{
    public static void Emit(SourceProductionContext context, EnumDeclarationSyntax source)
    {
        const string code = """
// <auto-generated>
// This .cs file is generated by FastEnum source generator.
// </auto-generated>
#nullable enable

using System;
using System.Runtime.CompilerServices;
using FastEnumUtility;

namespace FastEnumUtility.Sandbox;



file sealed class FastEnumOperation : IFastEnumOperation<Fruits>
{
    [ModuleInitializer]
    public static void Initialize()
    {
        FastEnumOperationProvider.Register(new FastEnumOperation());
    }


    #region IFastEnumOperation<T>
    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string? GetName(Fruits value)
    {
        return Enum.GetName(value);
    }


    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IsDefined(Fruits value)
    {
        return Enum.IsDefined(value);
    }


    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public string ToString(Fruits value)
    {
        return value.ToString();
    }


    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryParseName(string text, out Fruits result)
    {
        return Enum.TryParse(text, out result);
    }


    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryParseValue(string text, out Fruits result)
    {
        return Enum.TryParse(text, out result);
    }
    #endregion
}
""";
        context.AddSource($"FastEnumUtility.Sandbox.Fruits.FastEnumOperation.g.cs", code);
    }
}
