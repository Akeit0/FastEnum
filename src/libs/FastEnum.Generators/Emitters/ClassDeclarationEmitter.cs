using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace FastEnumUtility.Generators.Emitters;



internal static class ClassDeclarationEmitter
{
    public static void Register(IncrementalGeneratorInitializationContext context)
    {
        var typeDeclarations
            = context.SyntaxProvider.ForAttributeWithMetadataName
            (
                fullyQualifiedMetadataName: "FastEnumUtility.FastEnumAttribute`1",
                predicate: static (node, cancellationToken) =>
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    return node is ClassDeclarationSyntax;
                },
                transform: static (context, cancellationToken) =>
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    return context;
                }
            );
        var parseOptions = context.ParseOptionsProvider;
        var source = typeDeclarations.Combine(parseOptions);

        context.RegisterSourceOutput(source, static (context, source) =>
        {
            var syntax = source.Left;
            var options = (CSharpParseOptions)source.Right;
            var param = new GenerateParameters(syntax, options);
            var code = Generate(param);
            context.AddSource(param.FileName, code);
        });
    }


    private static string Generate(GenerateParameters param)
    {
        var sb = new StringBuilder();

        //--- header
        sb.AppendLine("""
            // <auto-generated>
            // This .cs file is generated by FastEnum source generator.
            // </auto-generated>
            #nullable enable

            using System;
            using System.Globalization;
            using System.Runtime.CompilerServices;
            using FastEnumUtility;
            """);

        //--- start namespace
        if (!param.IsGlobalNamespace)
        {
            sb.AppendLine($"""

                namespace {param.Namespace};
                """);
        }

        //--- start class
        sb.AppendLine($$"""

            {{param.Modifier}} class {{param.ClassName}} : IFastEnumOperation<{{param.EnumType}}>
            {
                [ModuleInitializer]
                public static void InitializeFastEnum()
                {
                    FastEnumOperationProvider.Register(new {{param.ClassName}}());
                }
            """);

        //--- IFastEnumOperation<T>
        sb.AppendLine("""

                #region IFastEnumOperation<T>
            """);

        //--- GetName
        {
            sb.AppendLine($$"""
                    /// <inheritdoc/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    string? IFastEnumOperation<{{param.EnumType}}>.GetName({{param.EnumType}} value)
                    {
                        return value switch
                        {
                """);
            foreach (var filed in param.Fields)
            {
                sb.AppendLine($"            {param.EnumType}.{filed.Name} => nameof({param.EnumType}.{filed.Name}),");
            }
            sb.AppendLine($$"""
                            _ => null,
                        };
                    }
                """);
        }

        //--- IsDefined
        {
            sb.AppendLine($$"""

                    /// <inheritdoc/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    bool IFastEnumOperation<{{param.EnumType}}>.IsDefined({{param.EnumType}} value)
                    {
                        return value switch
                        {
                """);
            foreach (var filed in param.Fields)
            {
                sb.AppendLine($"            {param.EnumType}.{filed.Name} => true,");
            }
            sb.AppendLine($$"""
                            _ => false,
                        };
                    }
                """);
        }

        //--- ToString
        {
            sb.AppendLine($$"""

                    /// <inheritdoc/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    string IFastEnumOperation<{{param.EnumType}}>.ToString({{param.EnumType}} value)
                    {
                        var name = ((IFastEnumOperation<{{param.EnumType}}>)this).GetName(value);
                        if (name is not null)
                            return name;

                        ref var x = ref Unsafe.As<{{param.EnumType}}, {{param.UnderlyingType}}>(ref value);
                        return x.ToString(null, CultureInfo.InvariantCulture);
                    }
                """);
        }

        //--- TryParseName
        {
            sb.AppendLine($$"""

                    /// <inheritdoc/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    bool IFastEnumOperation<{{param.EnumType}}>.TryParseName(string text, out {{param.EnumType}} result)
                    {
                        switch (text)
                        {
                """);
            foreach (var filed in param.Fields)
            {
                sb.AppendLine($$"""
                                case nameof({{param.EnumType}}.{{filed.Name}}):
                                    result = {{param.EnumType}}.{{filed.Name}};
                                    return true;

                    """);
            }
            sb.AppendLine($$"""
                            default:
                                result = default;
                                return false;
                        }
                    }
                """);
        }

        //--- TryParseValue
        {
            sb.AppendLine($$"""

                    /// <inheritdoc/>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    bool IFastEnumOperation<{{param.EnumType}}>.TryParseValue(string text, out {{param.EnumType}} result)
                    {
                        Unsafe.SkipInit(out result);
                        ref var x = ref Unsafe.As<{{param.EnumType}}, {{param.UnderlyingType}}>(ref result);
                        return {{param.UnderlyingType}}.TryParse(text, CultureInfo.InvariantCulture, out x);
                    }
                """);
        }

        //--- end class
        sb.AppendLine("""
                #endregion
            }
            """);

        //--- ok
        return sb.ToString();
    }


    #region Nested Types
    private sealed class GenerateParameters
    {
        #region Properties
        public LanguageVersion LanguageVersion { get; }
        public bool IsGlobalNamespace { get; }
        public string Namespace { get; }
        public string Modifier { get; }
        public string ClassName { get; }
        public string EnumType { get; }
        public string UnderlyingType { get; }
        public IReadOnlyList<IFieldSymbol> Fields { get; }
        public string FileName { get; }
        #endregion


        #region Constructors
        public GenerateParameters(GeneratorAttributeSyntaxContext context, CSharpParseOptions parseOptions)
        {
            var symbol = (INamedTypeSymbol)context.TargetSymbol;
            var attr = context.Attributes.First(static x => x.AttributeClass!.MetadataName is "FastEnumAttribute`1");
            var enumType = (INamedTypeSymbol)attr.AttributeClass!.TypeArguments[0];

            this.LanguageVersion = parseOptions.LanguageVersion;
            this.IsGlobalNamespace = symbol.ContainingNamespace.IsGlobalNamespace;
            this.Namespace = symbol.ContainingNamespace.ToDisplayString();
            this.Modifier = "partial";
            this.ClassName = symbol.ToDisplayString();
            this.EnumType = enumType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            this.UnderlyingType = enumType.EnumUnderlyingType?.ToDisplayString() ?? "int";
            this.Fields = enumType.GetMembers().OfType<IFieldSymbol>().ToArray();

            var className = this.ClassName.Replace("<", "_").Replace(">", "_");
            this.FileName = $"{className}.FastEnumOperation.g.cs";
        }
        #endregion
    }
    #endregion
}
